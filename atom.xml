<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blog.pagesd.info</title>
    <subtitle>Un peu de tout et n&#39;importe quoi...</subtitle>
    <link href="https://blog.pagesd.info/" rel="alternate" hreflang="fr-FR" />
    <updated>2022-01-10T11:36:08.000Z</updated>
    <id>https://blog.pagesd.info/atom.xml</id>
    <link href="https://blog.pagesd.info/atom.xml" rel="self" type="application/atom+xml" />
    <author>
        <name>Michel</name>
    </author>
    <entry>
        <title type="html">LeMOT pour jouer à WORDLE en français</title>
        <link href="https://blog.pagesd.info/2022/01/10/le-mot-wordle-en-francais/" rel="alternate" hreflang="fr-FR" />
        <updated>2022-01-10T11:36:08.000Z</updated>
        <published>2022-01-10T11:36:08.000Z</published>
        <id>https://blog.pagesd.info/2022/01/10/le-mot-wordle-en-francais/</id>
        <summary>Ce week-end, j&#39;ai mis en ligne une version française de WORDLE. J&#39;ai développé mon propre code en Vanilla JS et en plus, j&#39;ai trouvé un super nom &quot;LeMOT&quot;, et même un slogan &quot;Un Mot, un Jour&quot; !</summary>
        <content type="html" xml:lang="fr-FR" xml:base="https://blog.pagesd.info">
&lt;p&gt;Il y a quelque temps, j&#39;avais vu apparaitre de drôles d&#39;images dans Twitter. Ça ressemblait un peu à la représentation des contributions de GitHub, mais sur une seule semaine ?&lt;/p&gt;
&lt;p&gt;J&#39;ai fini par comprendre ce que c&#39;était et j&#39;ai alors découvert &lt;a href=&quot;https://powerlanguage.co.uk/wordle/&quot;&gt;WORDLE&lt;/a&gt;, un nouveau jeu de mots, sorte de croisement entre Mastermind et le Pendu, développé par Josh Wardle. Wordle / Wardle : malin !&lt;/p&gt;
&lt;p&gt;Alors bien entendu, j&#39;ai joué moi aussi, ou plutôt j&#39;ai essayé de jouer... Parce que j&#39;ai assez vite dû me rendre à l&#39;évidence et reconnaitre que mon vocabulaire en anglais n&#39;était pas assez fourni pour réussir à gagner régulièrement. Alors que je suis tout fier de pouvoir suivre des séries ou des films en VO avec les sous-titres en anglais ! Ou alors j&#39;ai une grosse lacune en ce qui concerne les mots anglais de 5 lettres ?&lt;/p&gt;
&lt;p&gt;Il y a 2 ou 3 ans, j&#39;avais récupéré quelques listes de mots en français pour développer un programme qui me permettrait d&#39;optimiser mon jeu au Scrabble (ou tricher si on veut). Mais finalement, je n&#39;avais jamais rien programmé.&lt;/p&gt;
&lt;p&gt;Mais ce week-end, après m&#39;être levé aux aurores vers 10h du matin, je me suis lancé ! Et juste après minuit, j&#39;avais déjà réussi à coder un truc pas mal du tout que j&#39;ai pu mettre en ligne sur mon site de jeux de solitaires : &lt;a href=&quot;https://www.solitaire-play.com/lemot/&quot;&gt;https://www.solitaire-play.com/lemot/&lt;/a&gt;. J&#39;étais super-content parce que je ne m&#39;étais pas contenté d&#39;adapter le code de Josh Wardle, mais que j&#39;avais écrit ma propre version en Vanilla JS. Et en plus, j&#39;avais trouvé un super nom : &amp;quot;&lt;strong&gt;LeMOT&lt;/strong&gt;&amp;quot;. WORD-Le =&amp;gt; Le-WORD =&amp;gt; Le-MOT !&lt;/p&gt;
&lt;p&gt;Et j&#39;avais même eu une idée de slogan pour compléter le titre : &amp;quot;Un Mot, un Jour&amp;quot;, inspiré de l&#39;émission de télévision &amp;quot;Un livre, un jour&amp;quot;.&lt;/p&gt;
&lt;p&gt;Après je suis allé dormir et le lendemain, j&#39;ai continué sur ma lancée et j&#39;ai apporté tout un tas d&#39;améliorations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mise au point de la sauvegarde de la partie en cours, pour pouvoir y revenir plus tard si on sèche.&lt;/li&gt;
&lt;li&gt;Ajouté un filigrane &amp;quot;version bêta&amp;quot; sous le titre du jeu parce que j&#39;ai peur des bugues :)&lt;/li&gt;
&lt;li&gt;Minifié les fichiers JavaScript et CSS pour optimiser le chargement.&lt;/li&gt;
&lt;li&gt;Affiché les messages dans une sorte de popup &amp;quot;flash&amp;quot; (utile pour dire si un mot est inconnu ou informer que le résultat en fin de partie a été copié dans le presse-papiers pour être collé dans Twitter ou WhatsApp).&lt;/li&gt;
&lt;li&gt;Mise à jour du contenu de la page et des balises meta et Open Graph, avec une image inspirée de celle de WORDLE.&lt;/li&gt;
&lt;li&gt;Modifié l&#39;export des résultats en emoji pour y ajouter la mention &amp;quot;(bêta)&amp;quot; et un hashtag &amp;quot;#LeMotLeJeu&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cela m&#39;a occupé jusqu&#39;en début d&#39;après-midi. Je ne m&#39;y suis remis que vers le soir, pour gérer correctement les indices couleurs lorsqu&#39;il y a des lettres en double, que ce soit dans le mot à deviner ou dans les réponses saisies.&lt;/p&gt;
&lt;p&gt;C&#39;était très amusant à faire et aucun doute que je vais continuer à travailler dessus.&lt;/p&gt;
&lt;p&gt;Déjà, j&#39;ai au moins deux ou trois trucs à faire pour mettre au point mon jeu.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sur certains téléphones, la dernière rangée de touches du clavier nest pas complètement visible (en particulier quand il y a plusieurs onglets dans un groupe et que cela masque en partie le bas du clavier).&lt;/li&gt;
&lt;li&gt;Pour aller vite, j&#39;ai utilisé des caractères Unicode pour réaliser les icones. Il faudrait les remplacer par des SVG pour que cela soit plus joli.&lt;/li&gt;
&lt;li&gt;Vérifier à quelle heure le mot est renouvelé. J&#39;utilise les dates UTC et donc en France, cela devrait se passer à 1h du matin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Puis il y a quelques trucs à ajouter pour essayer de reproduire au mieux les fonctionnalités du jeu d&#39;origine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Les statistiques : pour renforcer l&#39;attrait du jeu et inciter les joueurs à chercher à gagner pendant un maximum de jours d&#39;affilé.&lt;/li&gt;
&lt;li&gt;Avoir un bouton pour demander explicitement le partage des résultats.&lt;/li&gt;
&lt;li&gt;Les paramètres pour gérer des jeux de couleurs adaptés pour les personnes avec des difficultés visuelles (et le &amp;quot;mode sombre&amp;quot; si à la mode)...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un autre chantier intéressant sera de limiter la liste des mots proposés comme devinette. Dans la version originale, Josh Wardle a sélectionné seulement 20% des 12500 mots anglais de 5 lettres pour faire partie des happy few à deviner. Je ne sais pas trop pourquoi il a fait ça, ni sur quels critères. Sans doute leur fréquence d&#39;utilisation. Et donc, comment je peux faire ça en français ?&lt;/p&gt;
&lt;p&gt;En attendant, n&#39;hésitez pas et allez tester votre vocabulaire français sur &lt;a href=&quot;https://www.solitaire-play.com/lemot/&quot;&gt;LeMOT - Un jeu de mot chaque jour&lt;/a&gt;, pour voir si vous pouvez faire mieux que moi !&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.solitaire-play.com/lemot/&quot;&gt;&lt;img src=&quot;/public/2022/lemot2.png&quot; alt=&quot;LeMOT&quot; title=&quot;Qui fait mieux ?&quot;&gt;&lt;/a&gt;&lt;/p&gt;

        </content>
        <category term="javascript" />
        <category term="jeux" />
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pagesd.info/public/2022/lemot-jouer.png" />
        <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://blog.pagesd.info/public/2022/lemot-jouer.png" />
    </entry>
    <entry>
        <title type="html">Générer des fichiers pour le &quot;M&quot; de MVC avec Tada !</title>
        <link href="https://blog.pagesd.info/2022/01/05/generer-fichiers-models-avec-tada/" rel="alternate" hreflang="fr-FR" />
        <updated>2022-01-05T11:50:37.000Z</updated>
        <published>2022-01-05T11:50:37.000Z</published>
        <id>https://blog.pagesd.info/2022/01/05/generer-fichiers-models-avec-tada/</id>
        <summary>Ces derniers temps, j&#39;ai développé pour moi un petit programme qui permet de générer vite fait quelques un des fichiers pour la partie &quot;M&quot; d&#39;une application ASP.NET Core MVC. Cela me servira surtout pour développer des applications pour tester quelques trucs...</summary>
        <content type="html" xml:lang="fr-FR" xml:base="https://blog.pagesd.info">
&lt;h2&gt;Un &amp;quot;problème&amp;quot; --uneenvie&lt;/h2&gt;
&lt;p&gt;En ce moment, je (re)fais quelques tests pour savoir comment créer et organiser au plus simple
une application ASP.NET Core MVC. J&#39;ai déjà plus ou moins trouvé comment faire en ligne de commande avec &amp;quot;dotnet&amp;quot;, l&#39;interface de ligne de commande (CLI) de .NET Core, pour :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Créer une solution pour la nouvelle application ASP.NET Core&lt;/li&gt;
&lt;li&gt;Créer et ajouter un projet MVC à cette application&lt;/li&gt;
&lt;li&gt;Installer et référencer Entity Framework Core pour SQL Server et SQLite&lt;/li&gt;
&lt;li&gt;Faire un &lt;code&gt;dotnet build&lt;/code&gt; pour vérifier que tout est ok&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Puis vient le moment où il faut ajouter un modèle de données. Actuellement, je passe sous Visual Studio pour y coder les entités nécessaires puis j&#39;ajoute un &lt;code&gt;DbContext&lt;/code&gt;. Je trouve quand même que c&#39;est un peu lourd de devoir faire ça à chaque fois que je veux tester vite fait un truc (comme pour l&#39;application destinée à essayer &lt;a href=&quot;/2021/12/23/utiliser-htmx-avec-asp-net-core-mvc/&quot;&gt;HTMX avec ASP.NET Core MVC&lt;/a&gt; par exemple).&lt;/p&gt;
&lt;p&gt;Je suppose qu&#39;il existe déjà des outils .NET Core ou des extensions Visual Studio tout prêts qui font plus ou moins ça, mais j&#39;ai quand même eu envie de tenter ça à ma façon.&lt;/p&gt;
&lt;h2&gt;Une solution --pascompliquée&lt;/h2&gt;
&lt;p&gt;Après quelques jours, j&#39;ai finalement obtenu une application console qui correspond assez bien à ce que je souhaitais faire et qui accepte 3 commandes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tada model NomEntite ...&lt;/code&gt; pour générer un fichier Models/NomEntite.cs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tada enum NomEnum ...&lt;/code&gt; pour générer un fichier Models/NomEnum.cs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tada context ...&lt;/code&gt; pour générer un fichier Models/ModelContext.cs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pourquoi &amp;quot;tada&amp;quot; ? Parce que c&#39;est destiné à générer des fichiers liés au modèle de données. Et que &amp;quot;Donnée&amp;quot; = &amp;quot;Data&amp;quot; =&amp;gt; &amp;quot;Da-Ta&amp;quot; =&amp;gt; Tada !&lt;/p&gt;
&lt;p&gt;Pourquoi &amp;quot;enum&amp;quot; en plus de &amp;quot;model&amp;quot; et &amp;quot;context&amp;quot; ? Parce que généralement mon modèle &amp;quot;Movie&amp;quot; contient une propriété &amp;quot;Rating&amp;quot; de type &lt;code&gt;Enum&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;tada --help&lt;/h2&gt;
&lt;p&gt;Je me suis fait un peu plaisir et quand on lance &lt;code&gt;tada --help&lt;/code&gt; ou &lt;code&gt;tada&lt;/code&gt; sans autre paramètre, on tombe sur l&#39;aide du programme.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Tada Command-Line Tools (0.0.1)

Utilisation : tada [options] [commande] [arguments]

Options :
  -h|--help                  Affiche l&#39;aide de la ligne de commande
  -p|--project &amp;lt;PROJET&amp;gt;      Nom du projet pour définir le namespace
  --version                  Affiche la version utilisée

Commandes :
  model                      Génère une classe Models/NomEntite.cs
  enum                       Génère une classe Models/NomEnum.cs
  context                    Génère une classe Models/ProjetContext.cs

Pour plus d&#39;informations sur une commande, lancer &#39;tada [commande] --help&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note : Je gère les arguments de la ligne de commande à la main. Comparer les différentes solutions existantes et trouver celle qui (me) convient le plus me semble beaucoup trop de travail par rapport au temps que je souhaite consacrer à ce projet.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Si jamais la commande est lancée sans préciser l&#39;option &amp;quot;project&amp;quot; ou sans être dans un dossier contenant un fichier &amp;quot;*.csproj&amp;quot;, on obtient un message d&#39;erreur.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Tada Command-Line Tools (0.0.1)

Projet introuvable :
- L&#39;option --project &amp;lt;PROJET&amp;gt; n&#39;est pas définie
- Il n&#39;existe pas de fichier PROJET.csproj dans le dossier en cours
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;pub&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5475403929650645&quot;
     data-ad-slot=&quot;8049019520&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;&lt;/div&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;h2&gt;tada model --help&lt;/h2&gt;
&lt;p&gt;De la même façon, j&#39;ai pas mal travaillé sur l&#39;aide de la commande &lt;code&gt;tada model&lt;/code&gt;. Cela m&#39;a permis à la fois de mettre au point mais aussi de documenter la syntaxe particulière qui me sert à décrire le modèle de données en un minimum d&#39;information.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Tada Command-Line Tools (0.0.1) - Génère une classe Models/NomEntite.cs

Utilisation : tada model [options] [arguments]

Options :
  -h|--help                  Affiche l&#39;aide de la ligne de commande
  -p|--project &amp;lt;PROJET&amp;gt;      Nom du projet pour définir le namespace
                             (obtenu depuis PROJET.csproj sinon)

Arguments : Nom de l&#39;entité suivi de la description de ses propriétés (sous la forme Nom:{+}Type)

Exemples :
  tada model Genre Genre_ID:int Title:+string(30) --project MvcMovie
  tada model Genre Genre_ID:int Title:+string(30)

Exemple de code généré :
  Movie_ID:int               [Key]       // première propriété avec un nom terminé par &amp;quot;_ID&amp;quot;
                             public int Movie_ID { get; set; }
  Title:+string(60)          [Required]  // le type est précédé par &amp;quot;+&amp;quot;
                             [StringLength(60)]
                             public string Title { get; set; }
  ReleaseDate:DateTime       public DateTime ReleaseDate { get; set; }
  Genre:Genre                public int Genre_ID { get; set; }
                             [ForeignKey(&amp;quot;Genre_ID&amp;quot;)]
                             public virtual Genre Genre { get; set; }
  Price:decimal(18,2)        [Column(TypeName = &amp;quot;decimal(18, 2)&amp;quot;)]
                             public decimal Price { get; set; }
  Rating:+RatingEnum         [Required]
                             public RatingEnum Rating { get; set; }
  Directors:Director[]       public ICollection&amp;lt;Director&amp;gt; Directors { get; set; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C&#39;est un peu compact, mais c&#39;est suffisament clair pour moi. Peut-être parce que c&#39;est encore tout frais dans mon esprit... Pour récapituler (et ne pas oublier), chaque propriété du modèle est décrite sous la forme &amp;quot;Nom:{+}Type&amp;quot;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La partie &amp;quot;Nom&amp;quot; (avant les deux points) sert à définir le nom de la propriété&lt;/li&gt;
&lt;li&gt;Lorsque les deux points sont suivis d&#39;un &amp;quot;+&amp;quot;, cela signifie que la propriété est obligatoire (ce qui correspond au fait d&#39;ajouter une attribut &lt;code&gt;[Required]&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;La partie &amp;quot;Type&amp;quot; (après les deux points ou après &amp;quot;:+&amp;quot;) indique quel est le type de la propriété&lt;/li&gt;
&lt;li&gt;Certain types de propriété peuvent être complétés par une ou deux valeurs entre parenthèses, pour définir :
&lt;ul&gt;
&lt;li&gt;leur longueur maximum dans le cas des chaines : &lt;code&gt;string(60)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;leur précision dans le cas des nombres : &lt;code&gt;decimal(18,2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lorsque le &amp;quot;Nom&amp;quot; et le &amp;quot;Type&amp;quot; sont identiques, cela sert à définir une clé étrangère vers une autre entité&lt;/li&gt;
&lt;li&gt;Lorsque le &amp;quot;Type&amp;quot; est suivi de &amp;quot;[]&amp;quot;, cela indique qu&#39;il s&#39;agit d&#39;une propriété de navigation de type collection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dans le cas d&#39;un modèle simple style &lt;code&gt;tada model Genre Genre_ID:int Title:+string(30) Movies:Movie[]&lt;/code&gt;, on obtient le code source suivant (à condition de le lancer depuis le dossier du projet &amp;quot;MvcMovie&amp;quot;) :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace MvcMovie.Models
{
  public class Genre
  {
    [Key]
    public int Genre_ID { get; set; }

    [Required, StringLength(30)]
    public string Title { get; set; }

    public ICollection&amp;lt;Movie&amp;gt; Movies { get; set; }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Avec le modèle &amp;quot;Movie&amp;quot; un peu plus compliqué, la commande est un peu plus verbeuse.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c:\Code\MvcMovie\MvcMovie&amp;gt; tada model Movie Movie_ID:int Title:+string(60) ReleaseDate:DateTime Genre:Genre Price:decimal(18,2) Rating:+RatingEnum Directors:Director[]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et elle génère une classe avec d&#39;autant plus de code :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace MvcMovie.Models
{
  public class Movie
  {
    [Key]
    public int Movie_ID { get; set; }

    [Required, StringLength(60)]
    public string Title { get; set; }

    public DateTime ReleaseDate { get; set; }

    [ForeignKey(&amp;quot;Genre_ID&amp;quot;)]
    public virtual Genre Genre { get; set; }
    public int Genre_ID { get; set; }

    [Column(TypeName = &amp;quot;decimal(18, 2)&amp;quot;)]
    public decimal Price { get; set; }

    [Required]
    public RatingEnum Rating { get; set; }

    public ICollection&amp;lt;Director&amp;gt; Directors { get; set; }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;tada enum --help&lt;/h2&gt;
&lt;p&gt;A tant qu&#39;à faire, autant tout documenter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Tada Command-Line Tools (0.0.1) - Génère une classe Models/NomEnum.cs

Utilisation : tada enum [options] [arguments]

Options :
  -h|--help                  Affiche l&#39;aide de la ligne de commande
  -p|--project &amp;lt;PROJET&amp;gt;      Nom du projet pour définir le namespace
                             (obtenu depuis PROJET.csproj sinon)

Arguments : Nom de l&#39;enum suivi de ses valeurs

Exemples :
  tada enum Rating Enfants Interdit_moins_13_ans Interdit_mineurs Tout_public --project MvcMovie
  tada enum Rating Enfants Interdit_moins_13_ans Interdit_mineurs Tout_public
  tada enum -p MvcFacture Tva Normal Intermédiaire Réduit Particulier Zéro
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Par exemple, la commande &lt;code&gt;enum Rating Enfants Interdit_moins_13_ans Interdit_mineurs Tout_public&lt;/code&gt; lancée depuis le dossier du projet &amp;quot;MvcMovie&amp;quot; afficher le code suivant :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;namespace MvcMovie.Models
{
  public enum Rating
  {
    Enfants,
    Interdit_moins_13_ans,
    Interdit_mineurs,
    Tout_public
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;tada context --help&lt;/h2&gt;
&lt;p&gt;Là aussi, c&#39;est une syntaxe assez simple.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Tada Command-Line Tools (0.0.1) - Génère une classe Models/ProjetContext.cs

Utilisation : tada context [options] [arguments]

Options :
  -h|--help                Affiche l&#39;aide de la ligne de commande
  -p|--project &amp;lt;PROJET&amp;gt;    Nom du projet pour définir le namespace
                           (obtenu depuis PROJET.csproj sinon)

Arguments : Liste des entités du DbContext.

Exemples :
  tada context Movie Genre Director --project MvcMovie
  tada context Movie Genre Director
  tada -p MvcBlog context Blog Post Comment
  tada context -p MvcFacture Client Article Facture Ligne
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et donc, la commande &lt;code&gt;tada context Movie Genre Director&lt;/code&gt; lancée depuis le dossier du projet &amp;quot;MvcMovie&amp;quot; va afficher :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace MvcMovie.Models
{
  public class MvcMovieContext : DbContext
  {
    public MvcMovieContext(DbContextOptions&amp;lt;MvcMovieContext&amp;gt; options) : base(options) { }

    public DbSet&amp;lt;Movie&amp;gt; Movies { get; set; }
    public DbSet&amp;lt;Genre&amp;gt; Genres { get; set; }
    public DbSet&amp;lt;Director&amp;gt; Directors { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder) { }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion --àsuivre&lt;/h2&gt;
&lt;p&gt;Le code source de la première &amp;quot;version&amp;quot; de mon application est disponible sur &lt;a href=&quot;https://github.com/michelc/Tada&quot;&gt;GitHub&lt;/a&gt;. Comme pour l&#39;instant, je suis en phase de mise au point et de tests, les fichiers générés ne sont pas réellement écrits sur le disque, mais seulement affichés à l&#39;écran. Cela fait donc parti des évolutions à venir, avec quelques petits trucs que j&#39;ai en tête pour mettre au propre ou simplifier le code actuel.&lt;/p&gt;
&lt;p&gt;Comme un peu paresseusement je ne codais jusqu&#39;à présent que des applications console avec .NET Framework, j&#39;ai découvert au passage que ce n&#39;était pas si évident que ça d&#39;obtenir un &amp;quot;vrai&amp;quot; fichier &amp;quot;.EXE&amp;quot; avec .NET Core. J&#39;ai réussi à trouver comment faire, mais je vais essayer de creuser un peu plus et peut-être bien rédiger un autre billet pour expliquer comment cela fonctionne...&lt;/p&gt;
&lt;p&gt;Je compte aussi regarder comment créer un &amp;quot;&lt;a href=&quot;https://docs.microsoft.com/fr-fr/dotnet/core/tools/global-tools&quot;&gt;.NET Core global tools
&lt;/a&gt;&amp;quot; (pour pouvoir lancer via un &lt;code&gt;dotnet tada ...&lt;/code&gt;), mais je ne suis pas certain que cela en vaille la peine pour une utilisation personnelle.&lt;/p&gt;

        </content>
        <category term="csharp" />
        <category term=".net" />
        <category term="mvc" />
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pagesd.info/public/2022/tada.jpg" />
        <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://blog.pagesd.info/public/2022/tada.jpg" />
    </entry>
    <entry>
        <title type="html">Use HTMX with ASP.NET Core MVC</title>
        <link href="https://blog.pagesd.info/2021/12/24/use-htmx-with-asp-net-core-mvc/" rel="alternate" hreflang="en-US" />
        <updated>2021-12-24T11:07:22.000Z</updated>
        <published>2021-12-24T11:07:22.000Z</published>
        <id>https://blog.pagesd.info/2021/12/24/use-htmx-with-asp-net-core-mvc/</id>
        <summary>How to develop a CRUD application with HTMX + ASP.NET Core MVC. Essentially to avoid reloading / displaying full pages to manage CRUD functions.</summary>
        <content type="html" xml:lang="en-US" xml:base="https://blog.pagesd.info">
&lt;p&gt;As I found the time to clean up my tests with &lt;a href=&quot;https://htmx.org/&quot;&gt;HTMX&lt;/a&gt;, I can finally note how I developed a simple CRUD application with HTMX and ASP.NET Core MVC. At first, my goal is not to make zip, shebam, pow, blop, wizz... but to avoid reloading / displaying pages entirely to manage the basic CRUD functions.&lt;/p&gt;
&lt;h2&gt;Starting point&lt;/h2&gt;
&lt;p&gt;I quickly create an ASP.NET Core MVC application to manage a Movies table in an SQLite database. So I have a &amp;quot;MoviesController&amp;quot; controller with the following methods:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// GET: Movies
public async Task&amp;lt;IActionResult&amp;gt; Index() { ... }

// GET: Movies/Details/5
public async Task&amp;lt;IActionResult&amp;gt; Details(int? id) { ... }

// GET: Movies/Create
public IActionResult Create() { ... }

// POST: Movies/Create
[HttpPost]
[ValidateAntiForgeryToken]
public async Task&amp;lt;IActionResult&amp;gt; Create(MovieEditorViewModel model) { ... }

// GET: Movies/Edit/5
public async Task&amp;lt;IActionResult&amp;gt; Edit(int? id) { ... }

// POST: Movies/Edit/5
[HttpPost]
[ValidateAntiForgeryToken]
public async Task&amp;lt;IActionResult&amp;gt; Edit(int id, MovieEditorViewModel model) { ... }

// GET: Movies/Delete/5
public async Task&amp;lt;IActionResult&amp;gt; Delete(int? id) { ... }

// POST: Movies/Delete/5
[HttpPost, ActionName(&amp;quot;Delete&amp;quot;)]
[ValidateAntiForgeryToken]
public async Task&amp;lt;IActionResult&amp;gt; DeleteConfirmed(int id) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And 5 views that correspond to these 5 actions: &amp;quot;Index.cshtml&amp;quot;, &amp;quot;Details.cshtml&amp;quot;, &amp;quot;Create.cshtml&amp;quot;, &amp;quot;Edit.cshtml&amp;quot; and &amp;quot;Delete.cshtml&amp;quot; (plus 2 partial views &amp;quot;_Display.cshtml&amp;quot; and &amp;quot;_Editor.cshtml&amp;quot; to avoid repeating code).&lt;/p&gt;
&lt;p&gt;The code for this starter app is available on &lt;a href=&quot;https://github.com/michelc/MvcHtmx/tree/1-sans-htmx&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To test the application, you have to click on the &amp;quot;Movies&amp;quot; menu to navigate to the list of demo movies.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2021/htmx-essai-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;From this index page, you can see that when you click on the links &amp;quot;Créer&amp;quot;, &amp;quot;Modifier&amp;quot;, &amp;quot;Consulter&amp;quot; or &amp;quot;Supprimer&amp;quot;, the page is completely reloaded: the time in the footer is updated each time.&lt;/p&gt;
&lt;p&gt;In the same way, when you are in a detail page, the &amp;quot;Annuler&amp;quot; link to return to the movie list reloads the entire index page. Also, after submitting a form (to create, modify or delete data), it returns to the index page and fully reloads the page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2021/htmx-essai-2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now I will add HTMX to this app and then make some a few changes to use it and avoid to reload the whole pages every time.&lt;/p&gt;
&lt;div class=&quot;pub&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5475403929650645&quot;
     data-ad-slot=&quot;8049019520&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;&lt;/div&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;h2&gt;Step 1 - Referencing HTMX&lt;/h2&gt;
&lt;p&gt;There are several ways to &lt;a href=&quot;https://htmx.org/docs/#installing&quot;&gt;install HTMX&lt;/a&gt;, but to make it quick, I simply add the line &lt;code&gt;&amp;lt;script src=&amp;quot;https://unpkg.com/htmx.org@1.6.1&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; in my &amp;quot;/Views/Shared/_Layout.cshtml&amp;quot; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;        ...
        &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
            &amp;amp;copy; 2021 - MvcHtmx - @DateTime.Now.ToLongTimeString()
        &amp;lt;/div&amp;gt;
    &amp;lt;/footer&amp;gt;

    &amp;lt;script src=&amp;quot;~/lib/jquery/dist/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;~/js/site.js&amp;quot; asp-append-version=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;https://unpkg.com/htmx.org@1.6.1&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    @await RenderSectionAsync(&amp;quot;Scripts&amp;quot;, required: false)
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Step 2 - Update the &amp;quot;Index.cshtml&amp;quot; view&lt;/h2&gt;
&lt;p&gt;The &amp;quot;Index.cshtml&amp;quot; view contains a link &lt;code&gt;&amp;lt;a asp-action=&amp;quot;Create&amp;quot;&amp;gt;Créer&amp;lt;/a&amp;gt;&lt;/code&gt; in the table header to allow you to create a new movie.&lt;/p&gt;
&lt;p&gt;It is a classic TagHelper that generates the following HTML code &lt;code&gt;&amp;lt;a href=&amp;quot;/movies/create/&amp;quot;&amp;gt;Créer&amp;lt;/a&amp;gt;&lt;/code&gt;. When the user clicks on this link, the browser hits the web server via an HTTP GET request and ASP.NET Core performs the &amp;quot;Create&amp;quot; action from the &amp;quot;MoviesController&amp;quot; controller which returns a new page to the browser.&lt;/p&gt;
&lt;p&gt;As my application uses a &amp;quot;layout&amp;quot;, most of the new page corresponds verbatim to the content of the index page... In fact, the only thing that changes is generated by the Razor method &lt;code&gt;@RenderBody()&lt;/code&gt;. And from an HTML perspective, the change is in the content of the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;    &amp;lt;/header&amp;gt;

    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
        &amp;lt;main role=&amp;quot;main&amp;quot; class=&amp;quot;pb-3&amp;quot;&amp;gt;
            @RenderBody()
        &amp;lt;/main&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;footer class=&amp;quot;border-top footer text-muted&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is where HTMX comes in handy as it will allow me to return only the new content for the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;To do this, we need to add some information to our link, so that HTMX can do its work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an &amp;quot;&lt;a href=&quot;https://htmx.org/attributes/hx-get/&quot;&gt;hx-get&lt;/a&gt;&amp;quot; attribute : &lt;code&gt;hx-get=&amp;quot;/movies/create/&amp;quot;&lt;/code&gt; to indicate to HTMX that it will have to make an HTTP GET request on the URL &amp;quot;/movies/create/&amp;quot;, which corresponds to the &amp;quot;Create&amp;quot; action of the &amp;quot;MoviesController&amp;quot; controller.&lt;/li&gt;
&lt;li&gt;an &amp;quot;&lt;a href=&quot;https://htmx.org/attributes/hx-target/&quot;&gt;hx-target&lt;/a&gt;&amp;quot; attribute : &lt;code&gt;hx-target=&amp;quot;main&amp;quot;&lt;/code&gt; to target where HTMX will have to insert the content returned by the action (instead of the current content of the tag &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;an attribute &lt;code&gt;hx-push-url=&amp;quot;true&amp;quot;&lt;/code&gt; so that the browser address bar is updated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &amp;quot;&lt;a href=&quot;https://htmx.org/attributes/hx-push-url/&quot;&gt;hx-push-url&lt;/a&gt;&amp;quot; attribute is interesting for several reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Without it, the address bar would not change and would still contain &amp;quot;https://localhost/movies/&amp;quot; which is the URL of the index page.&lt;/li&gt;
&lt;li&gt;With it, the address bar will display the URL of the page allowing to create a movie, namely &amp;quot;https://localhost/movies/create/&amp;quot;.&lt;/li&gt;
&lt;li&gt;This is better if the user ever bookmarks this URL or gives it to someone.&lt;/li&gt;
&lt;li&gt;And most importantly, it allows the ASP.NET Core route system to work  correctly, without having to change anything.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Note: A later modification will allow me to do without this attribute, without losing any of these 4 advantages.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With these 3 new attributes, the TagHelper now looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;td&amp;gt;
  &amp;lt;a asp-action=&amp;quot;Create&amp;quot; hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/create/&amp;quot;&amp;gt;Créer&amp;lt;/a&amp;gt;
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it generates the following HTML code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;td&amp;gt;
  &amp;lt;a href=&amp;quot;/movies/create/&amp;quot; hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/create/&amp;quot;&amp;gt;Créer&amp;lt;/a&amp;gt;
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: I did a test and HTMX does not allow to write &lt;code&gt;&amp;lt;a href=&amp;quot;/movies/create/&amp;quot; hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot;&amp;gt;Créer&amp;lt;/a&amp;gt;&lt;/code&gt; in order to avoid &amp;quot;href&amp;quot; and &amp;quot;hx-get&amp;quot; attributes being duplicated.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the same way, I can modify the  &amp;quot;Modifier&amp;quot;, &amp;quot;Consulter&amp;quot; and &amp;quot;Supprimer&amp;quot; links by adding the 3 HTMX specific attributes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;td&amp;gt;
  &amp;lt;a asp-action=&amp;quot;Edit&amp;quot; asp-route-id=&amp;quot;@item.Movie_ID&amp;quot;
     hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/edit/@item.Movie_ID/&amp;quot;&amp;gt;Modifier&amp;lt;/a&amp;gt; |
  &amp;lt;a asp-action=&amp;quot;Details&amp;quot; asp-route-id=&amp;quot;@item.Movie_ID&amp;quot;
     hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/details/@item.Movie_ID/&amp;quot;&amp;gt;Consulter&amp;lt;/a&amp;gt; |
  &amp;lt;a asp-action=&amp;quot;Delete&amp;quot; asp-route-id=&amp;quot;@item.Movie_ID&amp;quot;
     hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/delete/@item.Movie_ID/&amp;quot;&amp;gt;Supprimer&amp;lt;/a&amp;gt;
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Step 3 - Modify other views&lt;/h2&gt;
&lt;p&gt;The &amp;quot;Details.cshtml&amp;quot;, &amp;quot;Create.cshtml&amp;quot;, &amp;quot;Edit.cshtml&amp;quot; and &amp;quot;Delete.cshtml&amp;quot; views all contain a link &lt;code&gt;&amp;lt;a href=&amp;quot;/movies/&amp;quot;&amp;gt;Annuler&amp;lt;/a&amp;gt;&lt;/code&gt; to exit the page and return to the movie list. This link is generated via the following TagHelper:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a asp-action=&amp;quot;Index&amp;quot;&amp;gt;Annuler&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That I replace with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a asp-action=&amp;quot;Index&amp;quot; hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/&amp;quot;&amp;gt;Annuler&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &amp;quot;Details.cshtml&amp;quot; view (which display a movie details) also contains a link to a new page to edit the current movie. This link is updated with the classic three &amp;quot;hx-*&amp;quot; attributes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a asp-action=&amp;quot;Edit&amp;quot; asp-route-id=&amp;quot;@Model.Movie_ID&amp;quot; class=&amp;quot;btn btn-secondary&amp;quot;
   hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/edit/@Model.Movie_ID/&amp;quot;&amp;gt;Modifier&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition, the &amp;quot;Create.cshtml&amp;quot; view contains an HTML form to send the entered data to the web server so that it can insert a new movie in the database.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form asp-action=&amp;quot;Create&amp;quot; method=&amp;quot;post&amp;quot; class=&amp;quot;form-horizontal&amp;quot;&amp;gt;
  ...
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Personally, I remove the &lt;code&gt;asp-action=&amp;quot;Create&amp;quot;&lt;/code&gt; because I make sure to always post a form on the same URL that displays this form. This is much better if there are any input errors detected afterwards on the server side.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form method=&amp;quot;post&amp;quot; class=&amp;quot;form-horizontal&amp;quot;&amp;gt;
  ...
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I extend the TagHelper so that it is taken into account by HTMX:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form method=&amp;quot;post&amp;quot; class=&amp;quot;form-horizontal&amp;quot; hx-post=&amp;quot;/movies/create/&amp;quot;&amp;gt;
  ...
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, the &amp;quot;hx-get&amp;quot; attribute is replaced by &amp;quot;&lt;a href=&quot;https://htmx.org/attributes/hx-post/&quot;&gt;hx-post&lt;/a&gt;&amp;quot; since the form makes an HTTP POST request and not an HTTP GET request. Since the attributes &amp;quot;hx-target&amp;quot; and &amp;quot;hx-push-url&amp;quot; have no effect when I did the test, I don&#39;t add them to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Then I do the same with the view &amp;quot;Edit.cshtml&amp;quot; which is used to modify a movie :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form method=&amp;quot;post&amp;quot; class=&amp;quot;form-horizontal&amp;quot; hx-post=&amp;quot;/movies/edit/@Model.Movie_ID/&amp;quot;&amp;gt;
  ...
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in the &amp;quot;Delete.cshtml&amp;quot; view which is used to delete a movie:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form method=&amp;quot;post&amp;quot; class=&amp;quot;form-horizontal&amp;quot; hx-post=&amp;quot;/movies/delete/@Model.Movie_ID/&amp;quot;&amp;gt;
  ...
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By the way, this is an MVC application and not an API. That&#39;s why I don&#39;t use HTTP PUT or HTTP DELETE methods. I follow the &amp;quot;traditional&amp;quot; ASP.NET MVC route system to link URLs to controller actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET /movies/ =&amp;gt; action &amp;quot;Index&amp;quot; to display the list of movies&lt;/li&gt;
&lt;li&gt;GET /movies/details/99/ =&amp;gt; &amp;quot;Details&amp;quot; action to display the details of a movie&lt;/li&gt;
&lt;li&gt;GET /movies/create/ =&amp;gt; &amp;quot;Create&amp;quot; action to display a form for creating a movie&lt;/li&gt;
&lt;li&gt;POST /movies/create/ =&amp;gt; &amp;quot;Create&amp;quot; action to create a new movie&lt;/li&gt;
&lt;li&gt;GET /movies/edit/99/ =&amp;gt; &amp;quot;Edit&amp;quot; action to display a form for editing a movie&lt;/li&gt;
&lt;li&gt;POST /movies/edit/99/ =&amp;gt; &amp;quot;Edit&amp;quot; action to modify a movie&lt;/li&gt;
&lt;li&gt;GET /movies/delete/99/ =&amp;gt; &amp;quot;Delete&amp;quot; action to display a form for deleting a movie&lt;/li&gt;
&lt;li&gt;POST /movies/delete/99/ =&amp;gt; &amp;quot;Delete&amp;quot; action to delete a movie&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note: The trailing &amp;quot;/&amp;quot; in the URL are not &amp;quot;standard&amp;quot;, I prefer it that way.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Step 4 - Return a partial view from the controller&lt;/h2&gt;
&lt;p&gt;I haven&#39;t worked on the controller code yet. So the Movie controller doesn&#39;t know anything and especially that there is a new HTMX. And of course, all its action methods continue to return complete pages to the browser. The first required modification is that they only return what is specific and nothing at all for the &amp;quot;layout&amp;quot; part.&lt;/p&gt;
&lt;p&gt;Thankfully, ASP.NET Core MVC applications use a &amp;quot;layout&amp;quot; template to avoid repeating HTML code, so it should be quite &amp;quot;easy&amp;quot;.&lt;/p&gt;
&lt;p&gt;Currently, actions typically end by returning a view to which they pass a template with &lt;code&gt;return View(data)&lt;/code&gt;. The ASP.NET Core view system then combines the data from this model, the Razor code from the view and the Razor code from the layout to generate a full HTML page that it sends back to the browser.&lt;/p&gt;
&lt;p&gt;Instead of doing a &lt;code&gt;return View(data)&lt;/code&gt;, we can also use &lt;code&gt;return PartialView(data)&lt;/code&gt; and in this case the layout is not included.&lt;/p&gt;
&lt;p&gt;Be careful though, because the first time the movie list page is displayed, the &amp;quot;Index&amp;quot; action must return a full page (i.e. with the layout). It is also necessary to return a full page if you navigate on a page via a browser bookmark or by following a link someone gave you.&lt;/p&gt;
&lt;p&gt;Fortunately, HTMX has anticipated all of this and it is easy to determine in which case called the action thanks to the &lt;a href=&quot;https://htmx.org/docs/#request-header&quot;&gt;HTTP header &amp;quot;HX-Request&amp;quot;&lt;/a&gt; available in the HTTP request:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;if (Request.Headers.ContainsKey(&amp;quot;HX-Request&amp;quot;))
{
  // When we respond to HTMX
  return PartialView(model);
}

return View(model); // If we did not use HTMX
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if I save this piece of code in a &amp;quot;HtmxView()&amp;quot; function, I can search/replace &amp;quot;return View()&amp;quot; with &amp;quot;return HtmxView(&amp;quot; and it will make Michel Street.&lt;/p&gt;
&lt;h2&gt;Step 5 - Manage RedirectToAction()&lt;/h2&gt;
&lt;p&gt;After a few different tests, it seems to work pretty well...&lt;/p&gt;
&lt;p&gt;Although, when we validate the &amp;quot;Create.cshtml&amp;quot;, &amp;quot;Edit.cshtml&amp;quot; or &amp;quot;Delete.cshtml&amp;quot; view form, the browser address bar keeps the current URL from before the POST when it should become the index page URL, aka &amp;quot;https://localhost/movies/&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2021/htmx-essai-3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The problem must come from the fact that it is not possible to use the &amp;quot;hx-target&amp;quot; and &amp;quot;hx-push-url&amp;quot; attributes with &amp;quot;hx-post&amp;quot; (or that I did not succeed to do it). Another possibility is that ASP.NET Core gets a bit lost when following the RedirectToAction() which concludes the successful POSTs (Post / Redirect / Get pattern).&lt;/p&gt;
&lt;p&gt;Anyway, I can fix this by adding a &lt;a href=&quot;https://htmx.org/docs/#response-header&quot;&gt;&amp;quot;HX-Push&amp;quot; HTTP header&lt;/a&gt; to the response when I send the view back. This tells HTMX to show a new URL in the browser address bar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;private IActionResult HtmxView(object model)
{
  if (Request.Headers.ContainsKey(&amp;quot;HX-Request&amp;quot;))
  {
    Response.Headers.Add(&amp;quot;HX-Push&amp;quot;, Request.Path.ToString());
    return PartialView(model);
  }

  return View(model);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Obviously, this method should be placed in a &amp;quot;BaseController.cs&amp;quot; file...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The icing on the cake!&lt;/strong&gt; Since I&#39;m not being picky and I&#39;m returning the HTTP header &amp;quot;HX-Push&amp;quot; with all partial views, I no longer need the &lt;code&gt;hx-push-url=&amp;quot;true&amp;quot;&lt;/code&gt; I have previously added to &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; links. Thus I can delete them without losing functionalities.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Once you know what to do, it goes pretty fast:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;&amp;lt;script src=&amp;quot;https://unpkg.com/htmx.org@1.6.1&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; in the layout.&lt;/li&gt;
&lt;li&gt;Replace links &lt;code&gt;&amp;lt;a asp-action=&amp;quot;Toto&amp;quot;&amp;gt;Tutu&amp;lt;/a&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;a asp-action=&amp;quot;Toto&amp;quot; hx-target=&amp;quot;main&amp;quot; hx-get=&amp;quot;/movies/toto/&amp;quot;&amp;gt;Tutu&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;hx-target=&amp;quot;main&amp;quot; hx-get=&amp;quot;/movies/toto/@Un_ID/&amp;quot;&lt;/code&gt; to links &lt;code&gt;&amp;lt;a asp-action=&amp;quot;Toto&amp;quot; asp-route-id=&amp;quot;@Un_ID&amp;quot;&amp;gt;Tutu&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rewrite all &lt;code&gt;&amp;lt;form method=&amp;quot;post&amp;quot; ...&lt;/code&gt; with &lt;code&gt;&amp;lt;form method=&amp;quot;post&amp;quot; hx-post=&amp;quot;/movies/toto/xxx&amp;quot; ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace all &lt;code&gt;return View(model);&lt;/code&gt; with &lt;code&gt;return HtmxView(model);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a method &lt;code&gt;private IActionResult HtmxView(object model) { ... }&lt;/code&gt; to the controller&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to clearly visualize and understand all the modifications, their details are visible in the form of diffs in the commit &amp;quot;&lt;a href=&quot;https://github.com/michelc/MvcHtmx/commit/a1a321ea16abf36ae39f5440db7936caa003985f&quot;&gt;Add HTMX as simply as possible&lt;/a&gt;&amp;quot; in the branch &amp;quot;2-ajout-htmx-basic&amp;quot; on GitHub.&lt;/p&gt;
&lt;h2&gt;To be continued&lt;/h2&gt;
&lt;p&gt;Next time, I will explain how to create 2 new TagHelper &lt;code&gt;&amp;lt;a-htmx&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;form-htmx&amp;gt;&lt;/code&gt; so that all these modifications are less complicated (and to avoid duplicates between &amp;quot;href&amp;quot; and &amp;quot;hx-get&amp;quot;).&lt;/p&gt;
&lt;p&gt;Spoiler: we will go from &lt;code&gt;&amp;lt;a asp-action=&amp;quot;Toto&amp;quot;&amp;gt;Tutu&amp;lt;/a&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;a-htmx asp-action=&amp;quot;Toto&amp;quot;&amp;gt;Tutu&amp;lt;/a-htmx&amp;gt;&lt;/code&gt;!&lt;/p&gt;
&lt;div class=&quot;encart&quot;&gt;
&lt;p&gt;Version en français : &lt;a href=&quot;/2021/12/23/utiliser-htmx-avec-asp-net-core-mvc/&quot; hreflang=&quot;fr-FR&quot;&gt;Utiliser HTMX avec ASP.NET Core MVC&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
        </content>
        <category term="csharp" />
        <category term=".net" />
        <category term="mvc" />
        <category term="htmx" />
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pagesd.info/public/2021/htmx-asp-net-core-mvc.jpg" />
        <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://blog.pagesd.info/public/2021/htmx-asp-net-core-mvc.jpg" />
    </entry>
    <entry>
        <title type="html">Utiliser HTMX avec ASP.NET Core MVC</title>
        <link href="https://blog.pagesd.info/2021/12/23/utiliser-htmx-avec-asp-net-core-mvc/" rel="alternate" hreflang="fr-FR" />
        <updated>2021-12-23T10:50:32.000Z</updated>
        <published>2021-12-23T10:50:32.000Z</published>
        <id>https://blog.pagesd.info/2021/12/23/utiliser-htmx-avec-asp-net-core-mvc/</id>
        <summary>Comment développer une application CRUD avec HTMX + ASP.NET Core MVC. Essentiellemet pour éviter de recharger / afficher intégralement les pages pour gérer les fonctions CRUD.</summary>
        <content type="html" xml:lang="fr-FR" xml:base="https://blog.pagesd.info">
&lt;p&gt;Comme j&#39;ai trouvé le temps de mettre au propre mes essais avec &lt;a href=&quot;https://htmx.org/&quot;&gt;HTMX&lt;/a&gt;, je peux enfin noter comment j&#39;ai développé une application CRUD toute simple avec HTMX et ASP.NET Core MVC. Dans un premier temps, mon but n&#39;est pas de faire des zip, shebam, pow, blop, wizz... mais d&#39;éviter de recharger / afficher intégralement des pages pour gérer les fonctions CRUD de base.&lt;/p&gt;
&lt;h2&gt;Point de départ&lt;/h2&gt;
&lt;p&gt;Je crée vite fait une application ASP.NET Core MVC pour gérer une table Movies dans une base de données SQLite. J&#39;ai donc un contrôleur &amp;quot;MoviesController&amp;quot; avec les méthodes suivantes :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// GET: Movies
public async Task&amp;lt;IActionResult&amp;gt; Index() { ... }

// GET: Movies/Details/5
public async Task&amp;lt;IActionResult&amp;gt; Details(int? id) { ... }

// GET: Movies/Create
public IActionResult Create() { ... }

// POST: Movies/Create
[HttpPost]
[ValidateAntiForgeryToken]
public async Task&amp;lt;IActionResult&amp;gt; Create(MovieEditorViewModel model) { ... }

// GET: Movies/Edit/5
public async Task&amp;lt;IActionResult&amp;gt; Edit(int? id) { ... }

// POST: Movies/Edit/5
[HttpPost]
[ValidateAntiForgeryToken]
public async Task&amp;lt;IActionResult&amp;gt; Edit(int id, MovieEditorViewModel model) { ... }

// GET: Movies/Delete/5
public async Task&amp;lt;IActionResult&amp;gt; Delete(int? id) { ... }

// POST: Movies/Delete/5
[HttpPost, ActionName(&amp;quot;Delete&amp;quot;)]
[ValidateAntiForgeryToken]
public async Task&amp;lt;IActionResult&amp;gt; DeleteConfirmed(int id) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et les 5 vues qui correspondent à ces 5 actions : &amp;quot;Index.cshtml&amp;quot;, &amp;quot;Details.cshtml&amp;quot;, &amp;quot;Create.cshtml&amp;quot;, &amp;quot;Edit.cshtml&amp;quot; et &amp;quot;Delete.cshtml&amp;quot; (plus 2 vues partielles &amp;quot;_Display.cshtml&amp;quot; et &amp;quot;_Editor.cshtml&amp;quot; pour éviter de répéter du code).&lt;/p&gt;
&lt;p&gt;Le code de cette application de départ est visible sur &lt;a href=&quot;https://github.com/michelc/MvcHtmx/tree/1-sans-htmx&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pour tester l&#39;application, il faut cliquer sur le menu &amp;quot;Films&amp;quot; pour obtenir la liste des films qui servent de jeux d&#39;essai.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2021/htmx-essai-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Depuis cette page d&#39;index, on peut constater que quand on clique sur les liens &amp;quot;Créer&amp;quot;, &amp;quot;Modifier&amp;quot;, &amp;quot;Consulter&amp;quot; ou &amp;quot;Supprimer&amp;quot;, la page est rechargée en totalité. En effet, la date et l&#39;heure dans le pied de page sont mis à jour à chaque fois.&lt;/p&gt;
&lt;p&gt;De même, quand on est dans une page de détail, le lien &amp;quot;Annuler&amp;quot; pour revenir à la liste recharge complètement la page d&#39;index. Et de la même façon, la validation des formulaires (pour créer, modifier ou supprimer des données) provoque un retour à la page d&#39;index et le rechargement complet de la page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2021/htmx-essai-2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;A partir de maintenant, je vais ajouter HTMX à cette application puis lui apporter quelques modifications pour en tirer parti et ne plus recharger l&#39;intégralité des pages à chaque fois.&lt;/p&gt;
&lt;div class=&quot;pub&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5475403929650645&quot;
     data-ad-slot=&quot;8049019520&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;&lt;/div&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;h2&gt;Etape 1 - Référencer HTMX&lt;/h2&gt;
&lt;p&gt;Il y a plusieurs façon d&#39;&lt;a href=&quot;https://htmx.org/docs/#installing&quot;&gt;installer HTMX&lt;/a&gt;, mais pour faire vite, j&#39;ajoute simplement la ligne &lt;code&gt;&amp;lt;script src=&amp;quot;https://unpkg.com/htmx.org@1.6.1&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; dans mon fichier &amp;quot;/Views/Shared/_Layout.cshtml&amp;quot; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;        ...
        &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
            &amp;amp;copy; 2021 - MvcHtmx - @DateTime.Now.ToLongTimeString()
        &amp;lt;/div&amp;gt;
    &amp;lt;/footer&amp;gt;

    &amp;lt;script src=&amp;quot;~/lib/jquery/dist/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;~/js/site.js&amp;quot; asp-append-version=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;https://unpkg.com/htmx.org@1.6.1&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    @await RenderSectionAsync(&amp;quot;Scripts&amp;quot;, required: false)
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Etape 2 - Modifier la vue &amp;quot;Index.cshtml&amp;quot;&lt;/h2&gt;
&lt;p&gt;La vue &amp;quot;Index.cshtml&amp;quot; contient un lien &lt;code&gt;&amp;lt;a asp-action=&amp;quot;Create&amp;quot;&amp;gt;Créer&amp;lt;/a&amp;gt;&lt;/code&gt; dans l&#39;en-tête de la table pour permettre de créer un nouveau film.&lt;/p&gt;
&lt;p&gt;C&#39;est un TagHelper classique qui génère le code HTML suivant : &lt;code&gt;&amp;lt;a href=&amp;quot;/movies/create/&amp;quot;&amp;gt;Créer&amp;lt;/a&amp;gt;&lt;/code&gt;. Lorsque l&#39;utilisateur clique sur ce lien, le navigateur contacte le serveur web via une requête HTTP GET et ASP.NET Core exécute l&#39;action &amp;quot;Create&amp;quot; du contrôleur &amp;quot;MoviesController&amp;quot; qui renvoie une nouvelle page au navigateur.&lt;/p&gt;
&lt;p&gt;Comme mon application utilise un &amp;quot;layout&amp;quot;, la majeure partie de la nouvelle page correspond mot pour mot au contenu de la page d&#39;index... En fait, ce qui change c&#39;est ce qui est généré par la méthode Razor &lt;code&gt;@RenderBody()&lt;/code&gt;. Et d&#39;un point de vue HTML, ce qui change, c&#39;est le contenu de la balise &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;    &amp;lt;/header&amp;gt;

    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
        &amp;lt;main role=&amp;quot;main&amp;quot; class=&amp;quot;pb-3&amp;quot;&amp;gt;
            @RenderBody()
        &amp;lt;/main&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;footer class=&amp;quot;border-top footer text-muted&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C&#39;est là que HTMX entre en jeu puisqu&#39;il va permettre de ne renvoyer que le nouveau contenu pour la balise &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pour cela, il faut ajouter quelques informations à notre lien, pour que HTMX puisse faire son oeuvre.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un attribut &amp;quot;&lt;a href=&quot;https://htmx.org/attributes/hx-get/&quot;&gt;hx-get&lt;/a&gt;&amp;quot; : &lt;code&gt;hx-get=&amp;quot;/movies/create/&amp;quot;&lt;/code&gt; pour indiquer à HTMX qu&#39;il devra faire une requête HTTP GET sur l&#39;URL &amp;quot;/movies/create/&amp;quot; qui correspond à l&#39;action &amp;quot;Create&amp;quot; du contrôleur &amp;quot;MoviesController&amp;quot;.&lt;/li&gt;
&lt;li&gt;un attribut &amp;quot;&lt;a href=&quot;https://htmx.org/attributes/hx-target/&quot;&gt;hx-target&lt;/a&gt;&amp;quot; : &lt;code&gt;hx-target=&amp;quot;main&amp;quot;&lt;/code&gt; pour cibler où HTMX va devoir insérer le contenu renvoyé par l&#39;action (à la place du contenu en cours de la balise &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;un attribut &lt;code&gt;hx-push-url=&amp;quot;true&amp;quot;&lt;/code&gt; pour que la barre d&#39;adresse du navigateur soit mise à jour.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L&#39;attribut &amp;quot;&lt;a href=&quot;https://htmx.org/attributes/hx-push-url/&quot;&gt;hx-push-url&lt;/a&gt;&amp;quot; est intéressant à plus d&#39;un titre :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sans lui, la barre d&#39;adresse ne changerait pas et contiendrait toujours &amp;quot;https://localhost/movies/&amp;quot; qui est l&#39;URL de la page d&#39;index.&lt;/li&gt;
&lt;li&gt;Avec lui, la barre d&#39;adresse affichera bien l&#39;URL de la page permettant de créer un film, à savoir &amp;quot;https://localhost/movies/create/&amp;quot;.&lt;/li&gt;
&lt;li&gt;Ce qui est mieux si jamais l&#39;utilisateur enregistre cette URL ou la communique à quelqu&#39;un.&lt;/li&gt;
&lt;li&gt;Et surtout, ça permet que le système de routes de ASP.NET Core s&#39;y retrouve correctement, sans rien avoir à changer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Note : Une modification ultérieure me permettra cependant de m&#39;en passer, sans perdre aucun de ces 4 avantages.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Avec ces 3 nouveaux attributs, le TagHelper est maintenant :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;td&amp;gt;
  &amp;lt;a asp-action=&amp;quot;Create&amp;quot; hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/create/&amp;quot;&amp;gt;Créer&amp;lt;/a&amp;gt;
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ce qui génère le code HTML suivant :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;td&amp;gt;
  &amp;lt;a href=&amp;quot;/movies/create/&amp;quot; hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/create/&amp;quot;&amp;gt;Créer&amp;lt;/a&amp;gt;
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note : J&#39;ai testé et HTMX ne permet d&#39;avoir &lt;code&gt;&amp;lt;a href=&amp;quot;/movies/create/&amp;quot; hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot;&amp;gt;Créer&amp;lt;/a&amp;gt;&lt;/code&gt; pour éviter que les attributs &amp;quot;href&amp;quot; et &amp;quot;hx-get&amp;quot; fassent doublon.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;De la même façon, je peux modifier les liens &amp;quot;Modifier&amp;quot;, &amp;quot;Consulter&amp;quot; et &amp;quot;Supprimer&amp;quot; en leur ajoutant les 3 attributs spécifiques à HTMX :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;td&amp;gt;
  &amp;lt;a asp-action=&amp;quot;Edit&amp;quot; asp-route-id=&amp;quot;@item.Movie_ID&amp;quot;
     hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/edit/@item.Movie_ID/&amp;quot;&amp;gt;Modifier&amp;lt;/a&amp;gt; |
  &amp;lt;a asp-action=&amp;quot;Details&amp;quot; asp-route-id=&amp;quot;@item.Movie_ID&amp;quot;
     hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/details/@item.Movie_ID/&amp;quot;&amp;gt;Consulter&amp;lt;/a&amp;gt; |
  &amp;lt;a asp-action=&amp;quot;Delete&amp;quot; asp-route-id=&amp;quot;@item.Movie_ID&amp;quot;
     hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/delete/@item.Movie_ID/&amp;quot;&amp;gt;Supprimer&amp;lt;/a&amp;gt;
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Etape 3 - Modifier les autres vues&lt;/h2&gt;
&lt;p&gt;Les vues &amp;quot;Details.cshtml&amp;quot;, &amp;quot;Create.cshtml&amp;quot;, &amp;quot;Edit.cshtml&amp;quot; et &amp;quot;Delete.cshtml&amp;quot; contiennent toutes un lien &lt;code&gt;&amp;lt;a href=&amp;quot;/movies/&amp;quot;&amp;gt;Annuler&amp;lt;/a&amp;gt;&lt;/code&gt; pour quitter la page et revenir à la liste des films. Ce lien est généré via le TagHelper suivant :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a asp-action=&amp;quot;Index&amp;quot;&amp;gt;Annuler&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Que je remplace en :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a asp-action=&amp;quot;Index&amp;quot; hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/&amp;quot;&amp;gt;Annuler&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La vue &amp;quot;Details.cshtml&amp;quot; qui sert à consulter un film contient également un lien qui renvoie vers la page pour modifier le film en cours. Sa modification avec 3 attributs &amp;quot;hx-*&amp;quot; supplémentaires est désormais classique :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a asp-action=&amp;quot;Edit&amp;quot; asp-route-id=&amp;quot;@Model.Movie_ID&amp;quot; class=&amp;quot;btn btn-secondary&amp;quot;
   hx-target=&amp;quot;main&amp;quot; hx-push-url=&amp;quot;true&amp;quot; hx-get=&amp;quot;/movies/edit/@Model.Movie_ID/&amp;quot;&amp;gt;Modifier&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite, la vue &amp;quot;Create.cshtml&amp;quot; contient un formulaire HTML pour envoyer les données saisies au serveur web afin qu&#39;il s&#39;occupe d&#39;insérer un nouveau film dans la base de données.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form asp-action=&amp;quot;Create&amp;quot; method=&amp;quot;post&amp;quot; class=&amp;quot;form-horizontal&amp;quot;&amp;gt;
  ...
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Personnellement, j&#39;ai enlevé le &lt;code&gt;asp-action=&amp;quot;Create&amp;quot;&lt;/code&gt; parce que je fais en sorte de toujours poster un formulaire sur la même URL que celle qui affiche ce formulaire. C&#39;est beaucoup mieux si jamais il y a des erreurs de saisie détectées après coup côté serveur.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form method=&amp;quot;post&amp;quot; class=&amp;quot;form-horizontal&amp;quot;&amp;gt;
  ...
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Je complète le TagHelper pour qu&#39;il soit pris en compte par HTMX :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form method=&amp;quot;post&amp;quot; class=&amp;quot;form-horizontal&amp;quot; hx-post=&amp;quot;/movies/create/&amp;quot;&amp;gt;
  ...
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dans ce cas, l&#39;attribut &amp;quot;hx-get&amp;quot; est remplacé par &amp;quot;&lt;a href=&quot;https://htmx.org/attributes/hx-post/&quot;&gt;hx-post&lt;/a&gt;&amp;quot; puisque le formulaire effectue une requête HTTP POST et pas une requête HTTP GET. Par ailleurs, les 2 attributs &amp;quot;hx-target&amp;quot; et &amp;quot;hx-push-url&amp;quot; n&#39;ayant pas d&#39;effet (quand j&#39;ai testé), je ne les ajoute pas.&lt;/p&gt;
&lt;p&gt;Puis je fais pareil avec la vue &amp;quot;Edit.cshtml&amp;quot; qui sert à modifier un film :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form method=&amp;quot;post&amp;quot; class=&amp;quot;form-horizontal&amp;quot; hx-post=&amp;quot;/movies/edit/@Model.Movie_ID/&amp;quot;&amp;gt;
  ...
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et dans la vue &amp;quot;Delete.cshtml&amp;quot; qui sert pour supprimer un film :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form method=&amp;quot;post&amp;quot; class=&amp;quot;form-horizontal&amp;quot; hx-post=&amp;quot;/movies/delete/@Model.Movie_ID/&amp;quot;&amp;gt;
  ...
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Au passage, comme il s&#39;agit d&#39;une application MVC et pas d&#39;une API, je n&#39;utilise pas les méthodes HTTP PUT ou HTTP DELETE. Je respecte le système de routes &amp;quot;traditionnel&amp;quot; de ASP.NET MVC pour faire le lien entre les URLs et les actions d&#39;un contrôleur :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET /movies/ =&amp;gt; action &amp;quot;Index&amp;quot; pour afficher la liste des films&lt;/li&gt;
&lt;li&gt;GET /movies/details/99/ =&amp;gt; action &amp;quot;Details&amp;quot; pour afficher le détail d&#39;un film&lt;/li&gt;
&lt;li&gt;GET /movies/create/ =&amp;gt; action &amp;quot;Create&amp;quot; pour afficher le formulaire de création d&#39;un film&lt;/li&gt;
&lt;li&gt;POST /movies/create/ =&amp;gt; action &amp;quot;Create&amp;quot; pour créer un nouveau film&lt;/li&gt;
&lt;li&gt;GET /movies/edit/99/ =&amp;gt; action &amp;quot;Edit&amp;quot; pour afficher le formulaire de modification d&#39;un film&lt;/li&gt;
&lt;li&gt;POST /movies/edit/99/ =&amp;gt; action &amp;quot;Edit&amp;quot; pour modifier un film&lt;/li&gt;
&lt;li&gt;GET /movies/delete/99/ =&amp;gt; action &amp;quot;Delete&amp;quot; pour afficher le formulaire de suppression d&#39;un film&lt;/li&gt;
&lt;li&gt;POST /movies/delete/99/ =&amp;gt; action &amp;quot;Delete&amp;quot; pour supprimer un film&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note : Les &amp;quot;/&amp;quot; en fin d&#39;URL ne sont pas &amp;quot;standards&amp;quot;, c&#39;est moi qui préfère comme ça.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Etape 4 - Renvoyer une vue partielle depuis le contrôleur&lt;/h2&gt;
&lt;p&gt;Comme je n&#39;ai pas encore touché au code du contrôleur, celui-ci n&#39;est au courant de rien et ne sait pas qu&#39;il y a un nouvel HTMX. Par conséquent, ses différentes actions vont continuer à renvoyer des pages complètes au navigateur. La première modification indispensable, c&#39;est donc de faire en sorte que celles-ci ne renvoient plus que ce qui est spécifique et plus rien du tout pour la partie &amp;quot;layout&amp;quot;.&lt;/p&gt;
&lt;p&gt;Etant donné que par défaut les applications ASP.NET Core MVC utilisent un &amp;quot;layout&amp;quot; pour éviter de répéter du code HTML, ça va être assez &amp;quot;facile&amp;quot;.&lt;/p&gt;
&lt;p&gt;Actuellement, les actions se terminent généralement en renvoyant une vue à laquelle elles passent un modèle : &lt;code&gt;return View(data)&lt;/code&gt;. Le système de vues de ASP.NET Core combine alors les informations de ce modèle, le code Razor de la vue et le code Razor du layout pour générer une page HTML complète qu&#39;il renvoie au navigateur.&lt;/p&gt;
&lt;p&gt;Plutôt que de faire un &lt;code&gt;return View(data)&lt;/code&gt;, on peut aussi faire un &lt;code&gt;return PartialView(data)&lt;/code&gt; et dans ce cas le layout n&#39;est pas pris en compte.&lt;/p&gt;
&lt;p&gt;Cependant, lors du premier affichage de la page d&#39;index des films, il faut que l&#39;action &amp;quot;Index&amp;quot; renvoie une page complète. Il faut aussi renvoyer une page complète si jamais on arrive sur une des pages via un favori du navigateur ou via un lien qu&#39;on nous a donné.&lt;/p&gt;
&lt;p&gt;Heureusement, HTMX a tout prévu et il est facile de savoir dans quelle condition l&#39;action est appelée grâce à l&#39;&lt;a href=&quot;https://htmx.org/docs/#request-header&quot;&gt;en-tête HTTP &amp;quot;HX-Request&amp;quot;&lt;/a&gt; présent dans la requête HTTP :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;if (Request.Headers.ContainsKey(&amp;quot;HX-Request&amp;quot;))
{
  // Cas où on vient depuis HTMX
  return PartialView(model);
}

return View(model); // Cas où on n&#39;est pas passé par HTMX
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et si je mets ce bout de code dans une fonction &amp;quot;HtmxView()&amp;quot;, je peux faire un rechercher / remplacer de &amp;quot;return View(&amp;quot; par &amp;quot;return HtmxView(&amp;quot; et ça fait la rue Michel.&lt;/p&gt;
&lt;h2&gt;Etape 5 - Gérer les RedirectToAction()&lt;/h2&gt;
&lt;p&gt;Quelques essais dans tous les sens et ça fonctionne plutôt bien...&lt;/p&gt;
&lt;p&gt;Par contre, quand on valide le formulaire des vues &amp;quot;Create.cshtml&amp;quot;, &amp;quot;Edit.cshtml&amp;quot; ou &amp;quot;Delete.cshtml&amp;quot;, la barre d&#39;adresse du navigateur reste sur l&#39;URL en cours au moment du POST alors qu&#39;il faudrait qu&#39;elle revienne à &amp;quot;https://localhost/movies/&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2021/htmx-essai-3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Le problème doit venir du fait qu&#39;il n&#39;est pas possible d&#39;utiliser les attributs &amp;quot;hx-target&amp;quot; et &amp;quot;hx-push-url&amp;quot; avec un &amp;quot;hx-post&amp;quot; (ou que je n&#39;ai pas réussi). Ou alors que ASP.NET Core s&#39;y perd un peu à la suite du RedirectToAction() qui vient conclure les POST réussis (pattern Post/Redirect/Get).&lt;/p&gt;
&lt;p&gt;Mais je peux contourner ça en ajoutant l&#39;&lt;a href=&quot;https://htmx.org/docs/#response-header&quot;&gt;en-tête HTTP &amp;quot;HX-Push&amp;quot;&lt;/a&gt; à la réponse au moment de renvoyer la vue. Celui-ci indique à HTMX de définir une nouvelle URL dans la barre d&#39;adresse du navigateur.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;private IActionResult HtmxView(object model)
{
  if (Request.Headers.ContainsKey(&amp;quot;HX-Request&amp;quot;))
  {
    Response.Headers.Add(&amp;quot;HX-Push&amp;quot;, Request.Path.ToString());
    return PartialView(model);
  }

  return View(model);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note : Bien évidemment, cette méthode mériterait d&#39;être dans un fichier &amp;quot;BaseController.cs&amp;quot;...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cerise sur le gateau !&lt;/strong&gt;  Comme je n&#39;ai pas fait dans la dentelle et que je renvoie l&#39;en-tête HTTP &amp;quot;HX-Push&amp;quot; avec toutes les vues partielles, je n&#39;ai plus besoin des &lt;code&gt;hx-push-url=&amp;quot;true&amp;quot;&lt;/code&gt; que j&#39;avais ajouté au niveau de chaque lien &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;. Je peux donc les supprimer sans perdre en fonctionnalités.&lt;/p&gt;
&lt;h2&gt;Récapitulatif&lt;/h2&gt;
&lt;p&gt;Une fois qu&#39;on sait ce qu&#39;il faut faire, ça va vite :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ajouter &lt;code&gt;&amp;lt;script src=&amp;quot;https://unpkg.com/htmx.org@1.6.1&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; dans le layout.&lt;/li&gt;
&lt;li&gt;Remplacer les liens &lt;code&gt;&amp;lt;a asp-action=&amp;quot;Toto&amp;quot;&amp;gt;Tutu&amp;lt;/a&amp;gt;&lt;/code&gt; par &lt;code&gt;&amp;lt;a asp-action=&amp;quot;Toto&amp;quot; hx-target=&amp;quot;main&amp;quot; hx-get=&amp;quot;/movies/toto/&amp;quot;&amp;gt;Tutu&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ajouter &lt;code&gt;hx-target=&amp;quot;main&amp;quot; hx-get=&amp;quot;/movies/toto/@Un_ID/&amp;quot;&lt;/code&gt; aux liens &lt;code&gt;&amp;lt;a asp-action=&amp;quot;Toto&amp;quot; asp-route-id=&amp;quot;@Un_ID&amp;quot;&amp;gt;Tutu&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Transformer les &lt;code&gt;&amp;lt;form method=&amp;quot;post&amp;quot; ...&lt;/code&gt; en &lt;code&gt;&amp;lt;form method=&amp;quot;post&amp;quot; hx-post=&amp;quot;/movies/toto/xxx&amp;quot; ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remplacer les &lt;code&gt;return View(model);&lt;/code&gt; par des &lt;code&gt;return HtmxView(model);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ajouter la méthode &lt;code&gt;private IActionResult HtmxView(object model) { ... }&lt;/code&gt; au contrôleur&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pour bien visualiser et comprendre les différentes modifications apportées, leur détail est visible sous forme de diff au niveau du commit &amp;quot;&lt;a href=&quot;https://github.com/michelc/MvcHtmx/commit/a1a321ea16abf36ae39f5440db7936caa003985f&quot;&gt;Ajout HTMX le plus simplement possible&lt;/a&gt;&amp;quot; de la branche &amp;quot;2-ajout-htmx-basique&amp;quot; sur GitHub.&lt;/p&gt;
&lt;h2&gt;Prochain épisode&lt;/h2&gt;
&lt;p&gt;La prochaine fois, j&#39;expliquerai comme créer 2 nouveaux TagHelper &lt;code&gt;&amp;lt;a-htmx&amp;gt;&lt;/code&gt; et &lt;code&gt;&amp;lt;form-htmx&amp;gt;&lt;/code&gt; pour que toutes ces modifications soient moins tarabiscotées (et pour éviter les doublons entre &amp;quot;href&amp;quot; et &amp;quot;hx-get&amp;quot;).&lt;/p&gt;
&lt;p&gt;Divulgachage : on passera de &lt;code&gt;&amp;lt;a asp-action=&amp;quot;Toto&amp;quot;&amp;gt;Tutu&amp;lt;/a&amp;gt;&lt;/code&gt; à &lt;code&gt;&amp;lt;a-htmx asp-action=&amp;quot;Toto&amp;quot;&amp;gt;Tutu&amp;lt;/a-htmx&amp;gt;&lt;/code&gt; !&lt;/p&gt;
&lt;div class=&quot;encart&quot;&gt;
&lt;p&gt;English version: &lt;a href=&quot;/2021/12/24/use-htmx-with-asp-net-core-mvc/&quot; hreflang=&quot;en-US&quot;&gt;Use HTMX with ASP.NET Core MVC&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
        </content>
        <category term="csharp" />
        <category term=".net" />
        <category term="mvc" />
        <category term="htmx" />
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pagesd.info/public/2021/htmx-asp-net-core-mvc.jpg" />
        <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://blog.pagesd.info/public/2021/htmx-asp-net-core-mvc.jpg" />
    </entry>
    <entry>
        <title type="html">Two highlight problems on dev.to</title>
        <link href="https://blog.pagesd.info/2021/12/21/highlight-problems-dev-to/" rel="alternate" hreflang="en-US" />
        <updated>2021-12-21T13:04:18.000Z</updated>
        <published>2021-12-21T13:04:18.000Z</published>
        <id>https://blog.pagesd.info/2021/12/21/highlight-problems-dev-to/</id>
        <summary>Yesterday, I had troubles to highlight my Nunjucks code on dev.to. Also, I had a very strange bug with my markdown snippets.</summary>
        <content type="html" xml:lang="en-US" xml:base="https://blog.pagesd.info">
&lt;p&gt;Yesterday, I had troubles to highlight my Nunjucks code on &lt;a href=&quot;https://dev.to/&quot;&gt;dev.to&lt;/a&gt;. Also, I had a very strange bug with my markdown snippets.&lt;/p&gt;
&lt;h2&gt;How to highlight Nunjucks on dev.to?&lt;/h2&gt;
&lt;p&gt;According to &lt;a href=&quot;https://github.com/forem/forem-docs/blob/main/docs/technical-overview/stack.md&quot;&gt;Forem technical docs&lt;/a&gt;, they use &lt;a href=&quot;https://github.com/rouge-ruby/rouge&quot;&gt;Rouge&lt;/a&gt; to highlight code snippets. Rouge can highlight &lt;a href=&quot;https://github.com/rouge-ruby/rouge/blob/master/docs/Languages.md&quot;&gt;over 200 different languages&lt;/a&gt;. But not &lt;a href=&quot;https://github.com/rouge-ruby/rouge/issues/758&quot;&gt;Nunjucks&lt;/a&gt;... On the other hand, it supports Liquid, Jinja and Twig who look a lot like Nunjucks.&lt;/p&gt;
&lt;p&gt;So I did some tests directly on &lt;a href=&quot;https://dev.to/michelc/how-to-highlight-nunjucks-on-devto-glm&quot;&gt;dev.to&lt;/a&gt; (where results are much more relevant than here on my blog where I don&#39;t highlight code).&lt;/p&gt;
&lt;h3&gt;Using ```liquid&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-liquid&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ site.lang }}&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;{{ title }} - {{ site.title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;!-- Le contenu généré par Eleventy sera ajouté là --&amp;gt;
  {{ content | safe }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Using ```jinja&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-jinja&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ site.lang }}&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;{{ title }} - {{ site.title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;!-- Le contenu généré par Eleventy sera ajouté là --&amp;gt;
  {{ content | safe }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Using ```twig&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-twig&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ site.lang }}&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;{{ title }} - {{ site.title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;!-- Le contenu généré par Eleventy sera ajouté là --&amp;gt;
  {{ content | safe }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;Liquid doesn&#39;t work. Probably because it&#39;s the template used by Forem. Jinja and Twig are fine. So I will write my Nunjucks examples by starting my code blocks with &lt;code&gt;```jinja&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;A bug with Markdown highlight?&lt;/h2&gt;
&lt;p&gt;I don&#39;t know why, but my Markdown code snippets are not all properly highlighted. If you search for &amp;quot;layout: layout.njk&amp;quot; in my post &amp;quot;&lt;a href=&quot;https://dev.to/michelc/creation-de-mon-site-eleventy-mo2&quot;&gt;Création de mon site Eleventy&lt;/a&gt;&amp;quot; on dev.to, the first frontmatter is correctly highlighted. But not in the second and third snippets.&lt;/p&gt;
&lt;p&gt;I always wrote:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;---
layout: layout.njk
---
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But the last two times, it generates too many dashes. And it can&#39;t to recognize my code anymore?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--------
layout: layout.njk
--------
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Maybe it&#39;s not related to &lt;code&gt;```markdown&lt;/code&gt;, because it also does it with only &lt;code&gt;```&lt;/code&gt; at the beginning of the code. On dev.to, I write &lt;code&gt;--------&lt;/code&gt; (8 dashes) to show exactly what I get on my previous post and it generates &lt;code&gt;-------------&lt;/code&gt; (13 dashes) instead :)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And if I move these two blocks at the beginning of my post, the highlight is magically fixed...&lt;/p&gt;
&lt;p&gt;If anyone has the solution, I&#39;m curious. But it&#39;s not that bad.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: It&#39;s fixed! Many thanks to &lt;a href=&quot;https://dev.to/djuber/comment/1kikf&quot;&gt;Daniel&lt;/a&gt; for solving this problem so quickly and to the whole Forem team for building such a good product.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sure, I don&#39;t have all this problems on my &lt;a href=&quot;https://blog.pagesd.info/&quot;&gt;blog&lt;/a&gt;. But to be fair, all snippets are just raw code.&lt;/p&gt;

        </content>
        <category term="11ty" />
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pagesd.info/public/2021/matrix.jpg" />
        <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://blog.pagesd.info/public/2021/matrix.jpg" />
    </entry>
    <entry>
        <title type="html">Création de mon site Eleventy</title>
        <link href="https://blog.pagesd.info/2021/12/20/eleventy-creation-site/" rel="alternate" hreflang="fr-FR" />
        <updated>2021-12-20T12:29:43.000Z</updated>
        <published>2021-12-20T12:29:43.000Z</published>
        <id>https://blog.pagesd.info/2021/12/20/eleventy-creation-site/</id>
        <summary>Pour migrer mon ancien blogue de Jekyll vers Eleventy, j&#39;ai commencé de façon classique en suivant les instructions disponibles un peu partout, en particulier la page Getting started sur le site d&#39;Eleventy.</summary>
        <content type="html" xml:lang="fr-FR" xml:base="https://blog.pagesd.info">
&lt;p&gt;Pour migrer mon ancien blogue de Jekyll vers Eleventy, j&#39;ai commencé de façon classique en suivant les instructions disponibles un peu partout, en particulier la page &lt;a href=&quot;https://www.11ty.dev/docs/getting-started/&quot;&gt;Getting started&lt;/a&gt; sur le site d&#39;Eleventy.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir blog11
cd blog11
npm init -y
npm install --save-dev @11ty/eleventy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puis sous VS Code, je modifie l&#39;entrée &amp;quot;scripts&amp;quot; du fichier &amp;quot;package.json&amp;quot; pour pouvoir facilement lancer mon site par un simple &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;build&amp;quot;: &amp;quot;npx @11ty/eleventy&amp;quot;,
    &amp;quot;start&amp;quot;: &amp;quot;npx @11ty/eleventy --serve&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comme je vais utiliser &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;, je crée un fichier &amp;quot;.gitignore&amp;quot; pour indiquer les éléments que Git ne doit pas gérer.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node_modules/
package-lock.json
_site/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note : Pour l&#39;instant, j&#39;exclus les classiques &amp;quot;node_modules/&amp;quot; et &amp;quot;package-lock.json&amp;quot; comme dans tous mes projets Node JS. J&#39;y ajoute le dossier &amp;quot;_site/&amp;quot; où Eleventy génèrera le contenu du site.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Par défaut, Eleventy ne gère pas les fichiers référencés dans le fichier &amp;quot;.gitignore&amp;quot;. Mais il est également possible d&#39;exclure d&#39;autres fichiers spécifiquement pour Eleventy en utilisant un fichier &amp;quot;.eleventyignore&amp;quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour entrer dans le vif du sujet, j&#39;ajoute le fichier &amp;quot;.eleventy.js&amp;quot; pour configurer Eleventy. Ce fichier sert à regrouper tout ce qui permet de configurer Eleventy, y compris pour remplacer certains trucs qui sinon devraient être gérés au niveau de la ligne de commande.&lt;/p&gt;
&lt;p&gt;Dans mon cas, je copie le contenu proposé par Sia Karamalegos dans son tutoriel &lt;a href=&quot;https://sia.codes/posts/itsiest-bitsiest-eleventy-tutorial/&quot;&gt;Itsiest, Bitsiest Eleventy Tutorial&lt;/a&gt; qui reprend uniquement les valeurs par défaut employées par Eleventy. Mais je trouve plus clair de savoir à quoi m&#39;attendre.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = function(eleventyConfig) {
  // Set custom directories for input, output, includes, and data
  return {
    dir: {
      input: &amp;quot;src&amp;quot;,
      includes: &amp;quot;_includes&amp;quot;,
      data: &amp;quot;_data&amp;quot;,
      output: &amp;quot;_site&amp;quot;
    }
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La ligne &lt;code&gt;input: &amp;quot;src&amp;quot;&lt;/code&gt; indique que les fichiers sources du site sont stockés dans le répertoire &amp;quot;src&amp;quot;. Je crée donc ce répertoire.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir src
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note : Avec &lt;code&gt;input: &amp;quot;src&amp;quot;&lt;/code&gt; j&#39;indique à Eleventy qu&#39;il doit traiter les fichiers du dossier &amp;quot;src&amp;quot; et de ses sous-répertoires. Par conséquent, je n&#39;ai pas vraiment besoin d&#39;exclure le fichier &amp;quot;README.md&amp;quot; via le fichier &amp;quot;.eleventyignore&amp;quot;, puisqu&#39;il est présent au niveau au dessus du répertoire &amp;quot;src&amp;quot;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;La ligne &lt;code&gt;includes: &amp;quot;_includes&amp;quot;&lt;/code&gt; indique que la charte graphique sera stockée dans le répertoire &amp;quot;_includes&amp;quot; du dossier &amp;quot;src&amp;quot;. De même, la ligne &lt;code&gt;data: &amp;quot;_data&amp;quot;&lt;/code&gt; indique que le paramétrage global du site est enregistré dans le répertoire &amp;quot;_data&amp;quot; du dossier &amp;quot;src&amp;quot;. Je crée donc ces 2 répertoires à l&#39;intérieur du répertoire &amp;quot;src&amp;quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd src
mkdir _includes
mkdir _data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour tester que ça marche, je crée enfin un premier fichier &amp;quot;index.md&amp;quot; dans le répertoire &amp;quot;src&amp;quot; avec un peu de contenu.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# Mon nouveau Blogue

C&#39;est parti pour la migration de Jekyll vers Eleventy.

Jusqu&#39;ici tout va bien...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puis je &amp;quot;compile&amp;quot; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ce qui donne :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; blog11@1.0.0 start
&amp;gt; npx @11ty/eleventy --serve

Writing _site/index.html from ./src/index.md.
Wrote 1 file in 0.21 seconds (v0.12.1)
Watching…
[Browsersync] Access URLs:
 ---------------------------------------
       Local: http://localhost:8080
    External: http://192.168.42.236:8080
 ---------------------------------------
          UI: http://localhost:3001
 UI External: http://localhost:3001
 ---------------------------------------
[Browsersync] Serving files from: _site
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Déjà il n&#39;y a pas d&#39;erreur ! Et je peux aller voir le site généré sur &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2021/eleventy-001.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;C&#39;est bien. Mais si j&#39;affiche le code source de cette page, je peux constater que ce n&#39;est pas un contenu HTML complet. On n&#39;y retrouve que les 3 lignes du fichier source transformées en HTML.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;h1&amp;gt;Mon nouveau Blogue&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;C&#39;est parti pour la migration de Jekyll vers Eleventy.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Jusqu&#39;ici tout va bien...&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;pub&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-5475403929650645&quot;
     data-ad-slot=&quot;8049019520&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;&lt;/div&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;p&gt;Je vais donc devoir ajouter un &amp;quot;layout&amp;quot; pour que Eleventy ait un &amp;quot;cadre&amp;quot; où insérer le HTML qu&#39;il génère à partir des fichiers Markdown. Pour cela, je crée un fichier &amp;quot;layout.njk&amp;quot; dans le sous-répertoire &amp;quot;src/_includes&amp;quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;fr-FR&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Mon nouveau blogue&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;!-- Le contenu généré par Eleventy sera ajouté là --&amp;gt;
  {{ content | safe }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puis il faut que j&#39;indique à Eleventy d&#39;utiliser ce layout lorsqu&#39;il génère le contenu du site. Pour cela, j&#39;ajoute un &amp;quot;front matter&amp;quot; au tout début du fichier &amp;quot;index.md&amp;quot; qui devient alors :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;---
layout: layout.njk
---
# Mon nouveau Blogue

C&#39;est parti pour la migration de Jekyll vers Eleventy.

Jusqu&#39;ici tout va bien...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lorsque je sauvegarde le fichier, le site est recompilé automatiquement, car la commande &amp;quot;npm start&amp;quot; (qui a lancé la commande &lt;code&gt;npx @11ty/eleventy --serve&lt;/code&gt;) est toujours en cours dans le terminal de VS Code.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;File changed: src\index.md
Writing _site/index.html from ./src/index.md.
Wrote 1 file in 0.07 seconds (v0.12.1)
Watching…
[Browsersync] Reloading Browsers...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et le contenu du navigateur est lui aussi automatiquement rafraichi (grâce à &lt;a href=&quot;https://browsersync.io/&quot;&gt;Browsersync&lt;/a&gt; qui est utilisé par Eleventy).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2021/eleventy-002.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Rien qu&#39;au titre de l&#39;onglet qui est passé de &amp;quot;localhost:8080&amp;quot; à &amp;quot;Mon nouveau blogue&amp;quot;, je peux voir que Eleventy a bien pris en compte le nouveau layout. Mais ça ne coûte qu&#39;un clic-droit de vérifier en affichant le code source de la page.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;fr-FR&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Mon nouveau blogue&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;&amp;lt;script id=&amp;quot;__bs_script__&amp;quot;&amp;gt;//&amp;lt;![CDATA[
    document.write(&amp;quot;&amp;lt;script async src=&#39;/browser-sync/browser-sync-client.js?v=2.27.7&#39;&amp;gt;&amp;lt;\/script&amp;gt;&amp;quot;.replace(&amp;quot;HOST&amp;quot;, location.hostname));
//]]&amp;gt;&amp;lt;/script&amp;gt;

  &amp;lt;!-- Le contenu généré par Eleventy sera ajouté là --&amp;gt;
  &amp;lt;h1&amp;gt;Mon nouveau Blogue&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;C&#39;est parti pour la migration de Jekyll vers Eleventy.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Jusqu&#39;ici tout va bien...&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C&#39;est pas mal !&lt;/p&gt;
&lt;p&gt;Mais comme on peut le voir, le titre de mon nouveau blogue apparait 2 fois : une première dans la balise &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; et une seconde dans la balise &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;. Ce qui est assez normal. Ce qui est moins amusant, c&#39;est que pour cela j&#39;ai dû le répéter dans 2 fichiers différents :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dans &amp;quot;layout.njk&amp;quot; pour qu&#39;il apparaisse dans la balise &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;dans &amp;quot;index.md&amp;quot; pour qu&#39;il s&#39;affiche dans le titre &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Et qu&#39;en plus je n&#39;ai même pas été foutu de l&#39;écrire de la même façon à chaque fois :)&lt;/p&gt;
&lt;p&gt;C&#39;est là que le dossier &amp;quot;src/_data&amp;quot; va servir. Je vais créer un fichier &amp;quot;site.json&amp;quot; pour y renseigner tous les informations globales du site. Ça correspond au fichier &amp;quot;_config.yml&amp;quot; de Jekyll.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;title&amp;quot;: &amp;quot;Mon nouveau Blogue&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;https://mon.nouveau.blog&amp;quot;,
    &amp;quot;lang&amp;quot;: &amp;quot;fr-FR&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Mon blog, de 2004 à aujourd&#39;hui...&amp;quot;,
    &amp;quot;author&amp;quot;: &amp;quot;Michel&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;J&#39;en ai mis un peu plus...&lt;/p&gt;
&lt;p&gt;Maintenant, je peux mettre à jour le layout pour y utiliser les variables globales &amp;quot;site.lang&amp;quot; et &amp;quot;site.title&amp;quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ site.lang }}&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;{{ site.title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;!-- Le contenu généré par Eleventy sera ajouté là --&amp;gt;
  {{ content | safe }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et aussi le fichier &amp;quot;index.md&amp;quot; pour y utiliser la variable globale &amp;quot;site.title&amp;quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;---
layout: layout.njk
---
# {{ site.title }}

C&#39;est parti pour la migration de Jekyll vers Eleventy.

Jusqu&#39;ici tout va bien...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Je retourne sur le navigateur et je peux constater que maintenant c&#39;est bien &amp;quot;Mon nouveau Blogue&amp;quot; partout.&lt;/p&gt;
&lt;p&gt;Un dernier truc pour aujourd&#39;hui. Comme le site va contenir plusieurs pages et des tas de billets, je vais avoir besoin de définir un titre pour chaque page en plus du titre général du site.&lt;/p&gt;
&lt;p&gt;Pour donner un titre à la page, j&#39;ajoute la variable &amp;quot;title&amp;quot; dans le front matter du fichier &amp;quot;index.md&amp;quot; et je remplace l&#39;utilisation de la variable globale &amp;quot;site.title&amp;quot; par celle de cette nouvelle variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;---
layout: layout.njk
title: Accueil
---
# {{ title }}

C&#39;est parti pour la migration de Jekyll vers Eleventy.

Jusqu&#39;ici tout va bien...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puis j&#39;ajoute le titre de la page dans &amp;quot;layout.njk&amp;quot; , pour que l&#39;utilisateur sache sur quelle page il est en plus d&#39;avoir le titre du blogue.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-njk&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ site.lang }}&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;{{ title }} - {{ site.title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;!-- Le contenu généré par Eleventy sera ajouté là --&amp;gt;
  {{ content | safe }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ce qui donne :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2021/eleventy-003.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ctrl+C dans le terminal de VS Code pour arrêter la tâche &amp;quot;npm start&amp;quot; et c&#39;est bon pour aujourd&#39;hui.&lt;/p&gt;
&lt;p&gt;Ou alors juste :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c:\code\blog11&amp;gt; git init -b main
c:\code\blog11&amp;gt; git add .
c:\code\blog11&amp;gt; git commit -m &amp;quot;Création du blog.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

        </content>
        <category term="11ty" />
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pagesd.info/public/2021/tour-eiffel.jpg" />
        <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://blog.pagesd.info/public/2021/tour-eiffel.jpg" />
    </entry>
</feed>