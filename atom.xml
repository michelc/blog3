<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blog.pagesd.info</title>
    <subtitle>Un peu de tout et n&#39;importe quoi...</subtitle>
    <link href="https://blog.pagesd.info/" rel="alternate" hreflang="fr-FR" />
    <updated>2023-08-16T17:08:22.000Z</updated>
    <id>https://blog.pagesd.info/atom.xml</id>
    <link href="https://blog.pagesd.info/atom.xml" rel="self" type="application/atom+xml" />
    <author>
        <name>Michel</name>
    </author>
    <entry>
        <title type="html">Gérer des clés étrangères avec SQLite</title>
        <link href="https://blog.pagesd.info/2023/08/16/sqlite-cles-etrangeres/" rel="alternate" hreflang="fr-FR" />
        <updated>2023-08-16T17:08:22.000Z</updated>
        <published>2023-08-16T17:08:22.000Z</published>
        <id>https://blog.pagesd.info/2023/08/16/sqlite-cles-etrangeres/</id>
        <summary>Quelques particularités auxquelles il faut penser pour gérer des clés étrangères avec SQLite et C#</summary>
        <content type="html" xml:lang="fr-FR" xml:base="https://blog.pagesd.info">
&lt;p&gt;Pour les petits trucs en .NET Core, le plus simple est d&#39;utiliser une base de données &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;. Mais si on veut gérer correctement les clés étrangères, il faut penser à tenir compte de quelques particularités, d&#39;où ce billet pour ne pas oublier...&lt;/p&gt;
&lt;p&gt;Dans l&#39;exemple qui suit, la clé étrangère permet de décrire la relation entre les deux tables &amp;quot;Blogs&amp;quot; (les parents) et &amp;quot;Posts&amp;quot; (les enfants) et d&#39;assurer l&#39;intégrité des données afin qu&#39;il n&#39;y ait pas d&#39;enfants sans un parent. Toute tentative d&#39;insertion d&#39;une ligne dans la table &amp;quot;Posts&amp;quot; qui ne correspondrait pas à une ligne de la table &amp;quot;Blogs&amp;quot; génèrera une erreur SQL. De la même façon, on provoquera une erreur SQL si on essaie de supprimer une ligne de la table &amp;quot;Blogs&amp;quot; alors qu&#39;il y a des données qui en dépendent dans la table &amp;quot;Posts&amp;quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE Blogs
(
  Blog_ID     INTEGER PRIMARY KEY,
  Title       TEXT
);

CREATE TABLE Posts
(
  Post_ID     INTEGER PRIMARY KEY,
  Blog_ID     INTEGER,
  Content     TEXT,
  FOREIGN KEY (Blog_ID) REFERENCES Blogs (Blog_ID)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SQLite permet de définir des clés étrangères sans problème. La difficulté c&#39;est que par défaut les contraintes liées aux clés étrangères sont désactivées (pour rester compatible avec les premières versions de SQLite).&lt;/p&gt;
&lt;p&gt;Concrètement, ça veut donc dire qu&#39;on peut créer des clés étrangères avec SQLite, mais qu&#39;elles ne servent à rien ! Et donc qu&#39;on pourra sans problème insérer des données sans clé étrangère &amp;quot;parent&amp;quot; ou supprimer des données &amp;quot;parents&amp;quot; pourtant utilisées par des enregistrements &amp;quot;enfants&amp;quot; :(&lt;/p&gt;
&lt;p&gt;Heureusement, il est possible d&#39;activer les contraintes liées aux étrangères. On ne peut pas faire cela de façon &amp;quot;globale&amp;quot;, mais uniquement au niveau de la connexion à la base de données. Sous SQlite, on réalise ça avec la commande &amp;quot;PRAGMA&amp;quot; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;sqlite&amp;gt; PRAGMA foreign_keys = ON;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Avec ADO.NET ou Entity Framework, c&#39;est encore plus simple (ou pas) puisqu&#39;il suffit d&#39;ajouter &amp;quot;Foreign Keys=true&amp;quot; à la chaine de connexion. Ce qui a pour effet d&#39;envoyer automatiquement la commande &lt;code&gt;PRAGMA foreign_keys = 1&lt;/code&gt; immédiatement après l&#39;ouverture de la connexion à la base de données.&lt;/p&gt;
&lt;p&gt;Grâce à cette modification toute simple, il ne sera plus possible d&#39;ajouter un &amp;quot;enfant&amp;quot; sans référencer un &amp;quot;parent&amp;quot; existant. Ou de supprimer un parent qui a un enfant...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;INSERT INTO Blogs (Blog_ID, Title) VALUES (1, &#39;Mon nouveau blogue&#39;);

COMMIT

INSERT INTO Posts (Post_ID, Blog_ID, Content) VALUES (1, 33, &#39;Mon premier billet&#39;);
=&amp;gt; FOREIGN KEY constraint failed

INSERT INTO Posts (Post_ID, Blog_ID, Content) VALUES (1, 1, &#39;Mon premier billet&#39;);

COMMIT

DELETE FROM Blogs WHERE Blog_ID = 1;
=&amp;gt; FOREIGN KEY constraint failed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt; : Avec EF Core, la clause &lt;code&gt;ON DELETE&lt;/code&gt; des clés étrangères est définie à &lt;code&gt;CASCADE&lt;/code&gt; par défaut... De quoi alimenter un autre billet de blogue !&lt;/p&gt;

        </content>
        <category term="sql" />
        <category term="csharp" />
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pagesd.info/public/2023/sqlite-foreign-keys.png" />
        <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://blog.pagesd.info/public/2023/sqlite-foreign-keys.png" />
    </entry>
    <entry>
        <title type="html">Générer un badge / avatar en C#</title>
        <link href="https://blog.pagesd.info/2023/08/14/generer-avatar-csharp/" rel="alternate" hreflang="fr-FR" />
        <updated>2023-08-14T10:07:46.000Z</updated>
        <published>2023-08-14T10:07:46.000Z</published>
        <id>https://blog.pagesd.info/2023/08/14/generer-avatar-csharp/</id>
        <summary>Une méthode simple pour afficher un avatar sans se péoccuper de savoir s&#39;il s&#39;agit d&#39;une image statique ou d&#39;une image dynamique générée en C#.</summary>
        <content type="html" xml:lang="fr-FR" xml:base="https://blog.pagesd.info">
&lt;p&gt;J&#39;ai récemment eu besoin d&#39;afficher à nouveau des avatars, et j&#39;ai voulu en profiter pour essayer une autre façon de faire par rapport à ce que j&#39;avais fait il y a 2 ans avec &amp;quot;&lt;a href=&quot;/2021/12/10/creer-badge-avatar-css/&quot; hreflang=&quot;fr-FR&quot;&gt;Créer un badge / avatar en CSS&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Et donc, plutôt que de faire ça avec du bon vieux code HTML et CSS, je génère automatiquement une image pour les personnes qui n&#39;ont pas de &amp;quot;vrai&amp;quot; avatar.&lt;/p&gt;
&lt;h2&gt;Renvoyer une image statique&lt;/h2&gt;
&lt;p&gt;Les images des avatars sont stockées dans le dossier &amp;quot;/wwwroot/avatars&amp;quot; pour les cas où il existe un avatar.&lt;/p&gt;
&lt;p&gt;Chaque avatar est enregistré en JPG, avec un nom de la forme &amp;quot;trigramme.prenom.nom.jpg&amp;quot;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trigramme = initiale du prénom + initiale du nom + lettre finale du nom (donc 3 lettres au total)&lt;/li&gt;
&lt;li&gt;prenom = le prénom en minuscule sans accents, espaces, tirets... de la personne&lt;/li&gt;
&lt;li&gt;nom = le nom en minuscule sans accents, espaces, tirets... de la personne&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Par conséquent, un nom de fichier est composé uniquement des 26 lettres &amp;quot;a&amp;quot; à &amp;quot;z&amp;quot;, avec un &amp;quot;.&amp;quot; pour séparer les différentes parties : &amp;quot;tsk.tony.stark.jpg&amp;quot;, &amp;quot;bbr.bruce.banner.jpg&amp;quot;, &amp;quot;srs.steve.rogers.jpg&amp;quot;, etc...&lt;/p&gt;
&lt;p&gt;De cette façon, lorsqu&#39;il existe un &amp;quot;vrai&amp;quot; avatar pour une personne, j&#39;utilise simplement l&#39;URL de l&#39;image &amp;quot;/avatars/tsk.tony.stark.jpg&amp;quot; et le middleware &amp;quot;UseStaticFiles()&amp;quot; renvoie cette image sans chercher plus loin.&lt;/p&gt;
&lt;h2&gt;Renvoyer une image dynamique&lt;/h2&gt;
&lt;p&gt;Dans les cas où il n&#39;existe pas d&#39;image, j&#39;ai une route qui prend le relai et qui renvoie une image générée à la volée. Ce qui donne au niveau de mon fichier &amp;quot;Program.cs&amp;quot; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// Middleware pour les fichiers statiques
// =&amp;gt; renvoie entre autre les images utilisées pour les avatars
app.UseStaticFiles();

...

// Route par défaut pour une application MVC basique
app.MapControllerRoute(
    name: &amp;quot;default&amp;quot;,
    pattern: &amp;quot;{controller=Home}/{action=Index}/{id?}&amp;quot;);

// Route spécifique pour générer des avatars
app.MapControllerRoute(
    name: &amp;quot;avatars&amp;quot;,
    pattern: &amp;quot;/avatars/{id}.jpg&amp;quot;,
    defaults: new { controller = &amp;quot;Avatars&amp;quot;, action = &amp;quot;Index&amp;quot; });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puis, dans le contrôleur &amp;quot;AvatarsController.cs&amp;quot;, je n&#39;ai plus qu&#39;à générer une image en fonction de l&#39;identifiant de l&#39;image, à savoir une chaine de la forme &amp;quot;trigramme.prenom.nom.jpg&amp;quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public ActionResult Index(string id = &amp;quot;&amp;quot;)
{
    var trigramme = id.Substring(0, 3).ToUpper();

    var color = GetColor(trigramme);
    var avatar = GetBitmap(color, trigramme);

    // Convertir l&#39;image en tableau de bytes (byte array)
    using (MemoryStream ms = new MemoryStream())
    {
        avatar.Save(ms, ImageFormat.Jpeg);
        byte[] imageBytes = ms.ToArray();

        // Renvoyer l&#39;image directement comme réponse HTTP avec le type de contenu approprié
        return File(imageBytes, &amp;quot;image/jpg&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Je commence par récupérer le trigramme de la personne car il va me permettre de générer une couleur de fond pour l&#39;avatar, via la fonction &lt;code&gt;GetColor(trigramme)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Puis j&#39;appelle la méthode &lt;code&gt;GetImage(color, trigramme)&lt;/code&gt; qui est chargée de générer l&#39;image correspondant à l&#39;avatar.&lt;/p&gt;
&lt;p&gt;Et enfin, je renvoie cette image au navigateur. Je peux alors utiliser la route de cette image &amp;quot;/avatars/tsk.tony.stark.jpg&amp;quot; exactement comme si c&#39;était un fichier statique.&lt;/p&gt;
&lt;h2&gt;Afficher l&#39;avatar&lt;/h2&gt;
&lt;p&gt;Côté HTML, je n&#39;ai donc pas à me préoccuper de savoir s&#39;il s&#39;agit d&#39;une image statique ou dynamique et je peux me contenter d&#39;afficher une image basique :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;round-avatar&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;/avatars/@(user.Trigramme).@(user.Prenom).@(user.Nom).jpg&amp;quot; /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puis quelques lignes de CSS pour donner un look &amp;quot;fini&amp;quot; à l&#39;avatar :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Avatars ronds */
.round-avatar img {
    border-radius: 50%;
    height: 64px;
    width: 64px;
}
/* Bordure au survol */
.round-avatar:hover img {
    box-shadow: 0 0 0 4px #fff;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Générer l&#39;avatar en C#&lt;/h2&gt;
&lt;p&gt;La fonction &lt;code&gt;GetColor()&lt;/code&gt; est un peu tarabiscotée et me permet de définir une couleur en fonction du trigramme. Je ferais peut-être un autre billet pour expliquer comment je procède...&lt;/p&gt;
&lt;p&gt;La fonction &lt;code&gt;GetImage()&lt;/code&gt; génère un carré avec le fond de la couleur demandée et les initiales de la personne en blanc. Pour cela, j&#39;utilise &lt;code&gt;System.Drawing&lt;/code&gt; de façon assez basique :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
...

private Bitmap GetBitmap (Color color, string trigramme)
{
    // Créer une image avec le fond de la couleur demandée
    var image = new Bitmap(400, 400);
    using (Graphics gfx = Graphics.FromImage(image))
    {
        gfx.SmoothingMode = SmoothingMode.AntiAlias;
        gfx.Clear(color);
    }

    // Ajouter les 2 initiales du trigramme centré au milieu de l&#39;image
    using (Graphics gfx = Graphics.FromImage(image))
    {
        Font font = new Font(&amp;quot;Calibri&amp;quot;, 128, FontStyle.Bold);
        Brush brush = new SolidBrush(Color.White);
        StringFormat format = new StringFormat();
        format.Alignment = StringAlignment.Center;
        format.LineAlignment = StringAlignment.Center;

        gfx.DrawString(trigramme.Substring(0, 2), font, brush, new Rectangle(0, 0, 400, 400), format);
    }

    // Renvoie l&#39;image générée
    return image;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;C&#39;était pas très compliqué à coder et c&#39;est amusant d&#39;avoir un truc simple capable d&#39;afficher des avatars sans avoir à faire la distinction entre les personnes pour lesquelles il existe un &amp;quot;vrai&amp;quot; avatar et celles pour lesquelles il n&#39;y en a pas.&lt;/p&gt;

        </content>
        <category term="csharp" />
        <category term=".net" />
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pagesd.info/public/2023/avatars-csharp.png" />
        <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://blog.pagesd.info/public/2023/avatars-csharp.png" />
    </entry>
    <entry>
        <title type="html">Array.every() et new Set() sauvent LeMOT</title>
        <link href="https://blog.pagesd.info/2023/01/17/array-every-new-set-sauvent-lemot/" rel="alternate" hreflang="fr-FR" />
        <updated>2023-01-17T16:55:17.000Z</updated>
        <published>2023-01-17T16:55:17.000Z</published>
        <id>https://blog.pagesd.info/2023/01/17/array-every-new-set-sauvent-lemot/</id>
        <summary>Hier j&#39;ai eu un petit problème dans mon jeu de Wordle en français. La solution à trouver n&#39;existait pas dans la liste des mots acceptés et il y a eu quelques parties qui se sont perdues injustement...</summary>
        <content type="html" xml:lang="fr-FR" xml:base="https://blog.pagesd.info">
&lt;h2&gt;Y&#39;a comme un bug ?&lt;/h2&gt;
&lt;p&gt;Hier j&#39;ai eu un petit problème dans mon jeu de Wordle en français. Comme dans le Wordle d&#39;origine, j&#39;utilise 2 listes de mots :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;la première avec tous les mots de 5 lettres acceptés par mon jeu : &amp;quot;jouables&amp;quot;&lt;/li&gt;
&lt;li&gt;la seconde avec les mots à trouver : &amp;quot;gagnants&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Contrairement à Josh Wardle, je n&#39;ai pas préparé cette liste une fois pour toute lorsque j&#39;ai créé le jeu. Dans la pratique, je la complète tous les 2 ou 3 mois, en ajoutant entre 50 et 100 mots à chaque fois. Je prends des mots au hasard dans la liste principale et je fais quelques ajustements pour éviter les mots trop compliqués ou pas très heureux...&lt;/p&gt;
&lt;p&gt;Une fois ces nouveaux mots trouvés, je vérifie qu&#39;ils n&#39;ont pas déjà été proposés (pas de doublons) et aussi qu&#39;ils existent bien dans la liste des mots acceptés (pas de mots introuvables). Je fais ça parce qu&#39;il m&#39;arrive de faire une faute de frappe quand je fais mes derniers petits ajustements.&lt;/p&gt;
&lt;p&gt;Malheureusement c&#39;est quelque chose que je fais manuellement et la dernière fois, j&#39;ai dû rater une étape. Lundi, le mot à trouver était &amp;quot;MONOI&amp;quot; (&amp;quot;monoï&amp;quot; avec la bonne orthographe), mais bizarrement ce mot ne faisait pas parti de la liste des mots jouables reconnus par l&#39;application !&lt;/p&gt;
&lt;p&gt;Et donc rien à faire, même en jouant bien on ne pouvait que perdre puis s&#39;entendre dire que la solution était &amp;quot;MONOI&amp;quot; alors que ça nous avait été refusé juste avant ! 😠😡&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2023/lemot-monoi.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Le bug en action...&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;Prudence est mère de sûreté...&lt;/h2&gt;
&lt;p&gt;Aussi pour éviter que cela ne se reproduise, j&#39;ai désormais automatisé ça directement dans le code. Cela affiche un message lorsque il y a des mots &amp;quot;gagnants&amp;quot; qui n&#39;existent pas dans la liste des mots &amp;quot;jouables&amp;quot; (donc des mots inconnus qui ne seront pas trouvables). Et un autre message si la liste des mots &amp;quot;gagnants&amp;quot; contient des doublons (en cas de mots déjà proposés).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
// Vérifie que tous les mots gagnants existent dans les mots jouables
if (gagnants.every(elem =&amp;gt; jouables.includes(elem)) === false)
  console.log(&amp;quot;gagnants inconnus !&amp;quot;);

// Vérifie qu&#39;il n&#39;y a pas de doublon dans les mots gagnants
if (gagnants.length !== [...new Set(gagnants)].length)
  console.log(&amp;quot;gagnants doublons !&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Les zexplications de ChatGPT :&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Vérifie que tous les mots gagnants existent dans les mots jouables
if (gagnants.every(elem =&amp;gt; jouables.includes(elem)) === false)
  console.log(&amp;quot;gagnants inconnus !&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Ce code vérifie si tous les éléments de l&#39;array &amp;quot;gagnants&amp;quot; apparaissent dans l&#39;array &amp;quot;jouables&amp;quot;. Si ce n&#39;est pas le cas, le message &amp;quot;gagnants inconnus !&amp;quot; est affiché dans la console. La méthode &amp;quot;every()&amp;quot; parcourt chaque élément de l&#39;array &amp;quot;gagnants&amp;quot; et vérifie si cet élément existe dans l&#39;array &amp;quot;jouables&amp;quot; en utilisant la méthode &amp;quot;includes()&amp;quot;. Si tous les éléments de &amp;quot;gagnants&amp;quot; existent dans &amp;quot;jouables&amp;quot;, la fonction &amp;quot;every()&amp;quot; renvoie &amp;quot;true&amp;quot; et le code dans la condition if ne sera pas exécuté, sinon elle renvoie &amp;quot;false&amp;quot; et le code dans la condition if sera exécuté.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Vérifie qu&#39;il n&#39;y a pas de doublon dans les mots gagnants
if (gagnants.length !== [...new Set(gagnants)].length)
  console.log(&amp;quot;gagnants doublons !&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Cette ligne de code vérifie s&#39;il y a des doublons dans l&#39;array &amp;quot;gagnants&amp;quot;. Elle utilise le &amp;quot;!==&amp;quot; pour vérifier si la longueur de l&#39;array &amp;quot;gagnants&amp;quot; est différente de celle de l&#39;array créé par la combinaison de &amp;quot;new Set()&amp;quot; et de l&#39;opérateur de décomposition &amp;quot;[...]&amp;quot;. La méthode &amp;quot;Set()&amp;quot; crée un nouvel objet Set qui contient les éléments uniques de l&#39;array passé en paramètre, l&#39;opérateur de décomposition &amp;quot;[...]&amp;quot; permet de convertir ce nouvel objet en array.
Si la longueur de l&#39;array &amp;quot;gagnants&amp;quot; est égale à celle de l&#39;array créé par la combinaison de &amp;quot;new Set()&amp;quot; et de l&#39;opérateur de décomposition &amp;quot;[...]&amp;quot;, cela signifie qu&#39;il n&#39;y a pas de doublons dans &amp;quot;gagnants&amp;quot; et la condition if ne sera pas exécuté. Sinon, il y a des doublons dans &amp;quot;gagnants&amp;quot; et le message &amp;quot;gagnants doublons !&amp;quot; sera affiché dans la console.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Que le jeux continue !&lt;/h2&gt;
&lt;p&gt;Heureusement, c&#39;est arrivé une seule fois en un peu plus d&#39;un an de jeu.&lt;/p&gt;
&lt;p&gt;Mais au moins, maintenant, si on perd ça ne sera plus que la faute à pas de chance : &lt;a href=&quot;https://www.solitaire-play.com/lemot/&quot;&gt;https://www.solitaire-play.com/lemot/&lt;/a&gt; :)&lt;/p&gt;

        </content>
        <category term="javascript" />
        <category term="jeux" />
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pagesd.info/public/2023/fleur-monoi.png" />
        <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://blog.pagesd.info/public/2023/fleur-monoi.png" />
    </entry>
    <entry>
        <title type="html">Replace Windows 10&#39;s emoji</title>
        <link href="https://blog.pagesd.info/2022/09/20/replace-windows-10-emoji/" rel="alternate" hreflang="en-US" />
        <updated>2022-09-20T17:31:55.000Z</updated>
        <published>2022-09-20T17:31:55.000Z</published>
        <id>https://blog.pagesd.info/2022/09/20/replace-windows-10-emoji/</id>
        <summary>Turns out, it&#39;s not that easy to replace Windows 10&#39;s old-school emojis with something a little more modern and cheerful...</summary>
        <content type="html" xml:lang="en-US" xml:base="https://blog.pagesd.info">
&lt;p&gt;Lately, I&#39;ve been back on developing a sort of Twitter client / application to help me track interactions around my &lt;a href=&quot;https://www.solitaire-play.com/lemot/&quot;&gt;French Wordle game&lt;/a&gt; (and the 3 other games that I developed later).&lt;/p&gt;
&lt;p&gt;This weekend, to take my mind off things a bit, I tried to improve the look of the emojis.&lt;/p&gt;
&lt;p&gt;Initially, since it&#39;s a web application, they are displayed with the default Windows 10 font for emojis, which isn&#39;t super great:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-defaut.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Basic emoji for Windows 10&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;1st try: &amp;quot;Segoe UI Emoji&amp;quot; from Windows 11&lt;/h2&gt;
&lt;p&gt;To make it easier, I tried to install the latest version of the &amp;quot;Segoe UI Emoji&amp;quot; font from Windows 11 and see what happened... Not much actually!&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-defaut.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Still using the original Windows 10 &quot;Segoe UI Emoji&quot; font :(&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I now have two &amp;quot;Segoe UI Emoji&amp;quot; fonts on my PC which doesn&#39;t seem to be ready to use the newer one by default.&lt;/p&gt;
&lt;p&gt;However, Firefox has proved to be smarter:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-firefox.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;The new &quot;Segoe UI Emoji&quot; font in Windows 11 :)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;2nd try: &amp;quot;Noto Color Emoji&amp;quot; from Google&lt;/h2&gt;
&lt;p&gt;Then I saw a new font from Google: &amp;quot;Noto Color Emoji&amp;quot; (&lt;a href=&quot;https://fonts.google.com/noto/specimen/Noto+Color+Emoji&quot;&gt;https://fonts.google.com/noto/specimen/Noto+Color+Emoji&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;After downloading it, I could have try to use it as a &amp;quot;system&amp;quot; font for emojis... But there was no reason for it to do better than Microsoft&#39;s &amp;quot;Segoe UI Emoji&amp;quot;.&lt;/p&gt;
&lt;p&gt;And there is nothing at the HTML/CSS level to indicate how emojis should be displayed using a particular font. If I want that, the easiest way is to include the emojis to be displayed inside a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag with a class to later define its font. Something like &lt;code&gt;&amp;lt;span class=&amp;quot;font-emoji&amp;quot;&amp;gt;🥳&amp;lt;/span&amp;gt;&lt;/code&gt; for example...&lt;/p&gt;
&lt;p&gt;I wrote a quick code so that the emojis would be displayed using this font. To do this, I wrapped all the emojis in a &amp;quot;pseudo&amp;quot; &lt;code&gt;&amp;lt;e&amp;gt;&lt;/code&gt; tag by using the following function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private string MakePrettyEmojis(string content)
{
    var pretty = &amp;quot;&amp;quot;;
    var runes = content.EnumerateRunes();
    foreach (var r in runes)
    {
        var one = r.ToString();
        if (one == &amp;quot;\u2b1c&amp;quot;)
            pretty += &amp;quot;&amp;lt;e&amp;gt;&amp;quot; + one + &amp;quot;&amp;lt;/e&amp;gt;&amp;quot;;
        else if (one == &amp;quot;\u26aa&amp;quot;)
            pretty += &amp;quot;&amp;lt;e&amp;gt;&amp;quot; + one + &amp;quot;&amp;lt;/e&amp;gt;&amp;quot;;
        else if (r.IsBmp == false)
            pretty += &amp;quot;&amp;lt;e&amp;gt;&amp;quot; + one + &amp;quot;&amp;lt;/e&amp;gt;&amp;quot;;
        else
            pretty += r.ToString();
    }
    pretty = pretty.Replace(&amp;quot;&amp;lt;/e&amp;gt;&amp;lt;e&amp;gt;&amp;quot;, &amp;quot;&amp;quot;);
    return pretty;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: As all emojis are apparently not on the same boat, I will have to try a little harder to manage all the existing emojis (something like a &lt;code&gt;Regex&lt;/code&gt; certainly).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;e&amp;gt;&lt;/code&gt; tag does not exist but browsers do not seem to be disturbed. And so, &lt;code&gt;&amp;lt;e&amp;gt;🥳&amp;lt;/e&amp;gt;&lt;/code&gt; will be  more &amp;quot;soft&amp;quot; than a long &lt;code&gt;&amp;lt;span class=&amp;quot;font-emoji&amp;quot;&amp;gt;🥳&amp;lt;/span&amp;gt;&lt;/code&gt; :)&lt;/p&gt;
&lt;p&gt;I update my CSS to define that &lt;code&gt;&amp;lt;e&amp;gt;&lt;/code&gt; elements must be displayed with the &amp;quot;Noto Color Emoji&amp;quot; font:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;e {
    font-family: &amp;quot;Noto Color Emoji&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the result is finally there, whatever the browser!&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-font-google.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Finally more cute emojis!!!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;But I&#39;m not a big fan of this little 3D effect. It feels like being back in the days of Windows 3.1 :)&lt;/p&gt;
&lt;h2&gt;3rd try: &amp;quot;Segoe UI Emoji&amp;quot; the return&lt;/h2&gt;
&lt;p&gt;Of course, I&#39;ll take a chance on:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;e {
    font-family: &amp;quot;Segoe UI Emoji&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But since there are 2 &amp;quot;Segoe UI Emoji&amp;quot; fonts on my Windows, the new one still doesn&#39;t override the old one... Unless there is a &lt;code&gt;font-version&lt;/code&gt; somewhere...&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-defaut.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Back to square one (except Firefox)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;4th try: &amp;quot;Twitter Color Emoji SVGinOT Font&amp;quot; by ???&lt;/h2&gt;
&lt;p&gt;I&#39;m looking if there are other emoji fonts and I find one based on Twitter emojis, even though it looks more like DIY than official stuff: &lt;a href=&quot;https://github.com/eosrei/twemoji-color-font&quot;&gt;https://github.com/eosrei/twemoji-color-font&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I download, install and then:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;e {
    font-family: &amp;quot;Twitter Color Emoji&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And oops...&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-font-twitter.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;All emojis are light gray...&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;5th try: &amp;quot;Emoji for everyone&amp;quot; from Twitter!!!&lt;/h2&gt;
&lt;p&gt;However, it led me to the &amp;quot;Twemoji&amp;quot; page: &lt;a href=&quot;https://twemoji.twitter.com/&quot;&gt;https://twemoji.twitter.com/&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Twitter&#39;s open source emoji has you covered for all your project&#39;s emoji
needs. With support for the latest Unicode emoji specification, featuring
3,245 emojis, and all for free.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wait, that&#39;s awesome!&lt;/p&gt;
&lt;p&gt;It looks like this is exactly what I&#39;m looking for! Something not complicated that can replace all the emojis of a page with the image of the corresponding Twitter emoji. That&#39;s good, cause I really like Twitter emojis :)&lt;/p&gt;
&lt;p&gt;I delete my &amp;quot;MakePrettyEmojis&amp;quot; function and my piece of CSS to return to the starting situation.&lt;/p&gt;
&lt;p&gt;I add some JavaScript to my &amp;quot;_Layout.cshtml&amp;quot; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;https://twemoji.maxcdn.com/v/latest/twemoji.min.js&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script&amp;gt;
    window.onload = function () {
        // https://gist.github.com/Armster15/db063ab0dc5be699ae07a067a7333752
        // Parses the document body and
        // inserts &amp;lt;img&amp;gt; tags in place of Unicode Emojis
        twemoji.parse(document.body,
            { folder: &#39;svg&#39;, ext: &#39;.svg&#39; } // This is to specify to Twemoji to use SVGs and not PNGs
        );
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I size the emojis with CSS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.emoji {
    height: 1.2em;
    width: 1.2em;
    margin: 0 1px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-twitter.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Tada! It&#39;s perfectly perfect.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Initially, my plan was to replace the Windows 10 emojis with more modern ones (and the latest ones from Microsoft were fine for me). But with the difficulties and to avoid having to &amp;quot;hack&amp;quot; my system, I preferred to just modify my application so that it displays the pretty emojis from Twitter instead.&lt;/p&gt;
&lt;div class=&quot;encart&quot;&gt;
&lt;p&gt;Version en français : &lt;a href=&quot;/2022/09/19/remplacer-emojis-windows-10/&quot; hreflang=&quot;fr-FR&quot;&gt;Remplacer les émojis de Windows 10&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

        </content>
        <category term="javascript" />
        <category term="twitter" />
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pagesd.info/public/2022/emoji-beebee.png" />
        <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://blog.pagesd.info/public/2022/emoji-beebee.png" />
    </entry>
    <entry>
        <title type="html">Remplacer les émojis de Windows 10</title>
        <link href="https://blog.pagesd.info/2022/09/19/remplacer-emojis-windows-10/" rel="alternate" hreflang="fr-FR" />
        <updated>2022-09-19T11:07:24.000Z</updated>
        <published>2022-09-19T11:07:24.000Z</published>
        <id>https://blog.pagesd.info/2022/09/19/remplacer-emojis-windows-10/</id>
        <summary>Il s&#39;avère que ce n&#39;est pas si simple que ça de remplacer les émojis à l&#39;ancienne de Windows 10 par quelque chose d&#39;un peu plus moderne et joyeux...</summary>
        <content type="html" xml:lang="fr-FR" xml:base="https://blog.pagesd.info">
&lt;p&gt;Ces derniers temps, je me suis remis sur le développement d&#39;une sorte d&#39;application / client Twitter pour me faciliter le suivi des interactions autour de mon jeu de &lt;a href=&quot;https://www.solitaire-play.com/lemot/&quot;&gt;Wordle en français&lt;/a&gt; (et des 3 autres que j&#39;ai développés depuis).&lt;/p&gt;
&lt;p&gt;Ce week-end, pour me changer un peu les idées, j&#39;ai décidé d&#39;améliorer le rendu des émojis.&lt;/p&gt;
&lt;p&gt;Au départ, comme il s&#39;agit d&#39;une application web, ils sont affichés avec la police par défaut de Windows 10 pour les émojis, ce qui n&#39;est pas super génial :&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-defaut.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Les émojis de base pour Windows 10&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;1er essai : &amp;quot;Segoe UI Emoji&amp;quot; de Windows 11&lt;/h2&gt;
&lt;p&gt;Pour faire au plus simple, j&#39;ai essayé d&#39;installer la dernière version de la police &amp;quot;Segoe UI Emoji&amp;quot; de Windows 11 et de voir ce que ça donnait... Pas grand chose en fait !&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-defaut.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Toujours les émojis de la police &quot;Segoe UI Emoji&quot; d&#39;origine de Windows 10 :(&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;J&#39;ai maintenant deux polices &amp;quot;Segoe UI Emoji&amp;quot; sur mon PC qui ne semble pas très chaud pour utiliser la plus récente par défaut.&lt;/p&gt;
&lt;p&gt;Malgré tout, Firefox s&#39;est montré plus malin :&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-firefox.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Les nouveaux émojis de la police &quot;Segoe UI Emoji&quot; de Windows 11 :)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;2ème essai : &amp;quot;Noto Color Emoji&amp;quot; de Google&lt;/h2&gt;
&lt;p&gt;Puis j&#39;ai vu passer une nouvelle police de chez Google : &amp;quot;Noto Color Emoji&amp;quot; (&lt;a href=&quot;https://fonts.google.com/noto/specimen/Noto+Color+Emoji&quot;&gt;https://fonts.google.com/noto/specimen/Noto+Color+Emoji&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Après l&#39;avoir téléchargée, je pouvais essayer de l&#39;utiliser comme police &amp;quot;système&amp;quot; pour les émojis... Mais il n&#39;y avait pas de raison qu&#39;elle se débrouille mieux que la &amp;quot;Segoe UI Emoji&amp;quot; de Microsoft himself.&lt;/p&gt;
&lt;p&gt;Et il n&#39;existe rien au niveau HTML / CSS pour indiquer qu&#39;il faut afficher les émojis en utilisant une police particulière. Si on veut y arriver, le plus simple est d&#39;englober les émojis à afficher dans une balise &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; avec une classe particulière pour pouvoir définir sa police. Quelque chose comme &lt;code&gt;&amp;lt;span class=&amp;quot;font-emoji&amp;quot;&amp;gt;🥳&amp;lt;/span&amp;gt;&lt;/code&gt; par exemple...&lt;/p&gt;
&lt;p&gt;Alors j&#39;ai bricolé vite fait un truc pour que les émojis soient affichés en utilisant cette police. Pour cela, j&#39;ai encadré tous les émojis dans une &amp;quot;pseudo&amp;quot; balise &lt;code&gt;&amp;lt;e&amp;gt;&lt;/code&gt; grâce à la fonction suivante :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private string MakePrettyEmojis(string content)
{
    var pretty = &amp;quot;&amp;quot;;
    var runes = content.EnumerateRunes();
    foreach (var r in runes)
    {
        var one = r.ToString();
        if (one == &amp;quot;\u2b1c&amp;quot;)
            pretty += &amp;quot;&amp;lt;e&amp;gt;&amp;quot; + one + &amp;quot;&amp;lt;/e&amp;gt;&amp;quot;;
        else if (one == &amp;quot;\u26aa&amp;quot;)
            pretty += &amp;quot;&amp;lt;e&amp;gt;&amp;quot; + one + &amp;quot;&amp;lt;/e&amp;gt;&amp;quot;;
        else if (r.IsBmp == false)
            pretty += &amp;quot;&amp;lt;e&amp;gt;&amp;quot; + one + &amp;quot;&amp;lt;/e&amp;gt;&amp;quot;;
        else
            pretty += r.ToString();
    }
    pretty = pretty.Replace(&amp;quot;&amp;lt;/e&amp;gt;&amp;lt;e&amp;gt;&amp;quot;, &amp;quot;&amp;quot;);
    return pretty;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note : Comme tous les émojis ne sont apparemment pas logés à la même enseigne, il faudra me creuser un peu plus les méninges pour réussir à gérer correctement tous les émojis existants (quelque chose dans le genre &lt;code&gt;Regex&lt;/code&gt; certainement).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;La balise &lt;code&gt;&amp;lt;e&amp;gt;&lt;/code&gt; n&#39;existe pas mais elle ne semble pas perturber les navigateurs. Et donc, &lt;code&gt;&amp;lt;e&amp;gt;🥳&amp;lt;/e&amp;gt;&lt;/code&gt; sera quand même plus &amp;quot;discret&amp;quot; qu&#39;un long &lt;code&gt;&amp;lt;span class=&amp;quot;font-emoji&amp;quot;&amp;gt;🥳&amp;lt;/span&amp;gt;&lt;/code&gt; :)&lt;/p&gt;
&lt;p&gt;Je complète mon fichier CSS pour y indiquer que les éléments &lt;code&gt;&amp;lt;e&amp;gt;&lt;/code&gt; doivent être affichés avec la police &amp;quot;Noto Color Emoji&amp;quot; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;e {
    font-family: &amp;quot;Noto Color Emoji&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et le résultat est enfin là, quelque soit le navigateur !&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-font-google.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Enfin de plus jolis émojis !!!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Mais j&#39;aime moyen ce petit effet 3D. On se croirait revenu au temps de Windows 3.1 :)&lt;/p&gt;
&lt;h2&gt;3ème essai : &amp;quot;Segoe UI Emoji&amp;quot; le retour&lt;/h2&gt;
&lt;p&gt;Bien entendu je tente le coup avec :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;e {
    font-family: &amp;quot;Segoe UI Emoji&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mais comme il y a 2 polices &amp;quot;Segoe UI Emoji&amp;quot; sur mon Windows, la nouvelle ne prend toujours pas le dessus sur l&#39;ancienne... A moins qu&#39;il existe un &lt;code&gt;font-version&lt;/code&gt; quelque part...&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-defaut.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Retour à la case départ (à part Firefox)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;4ème essais : &amp;quot;Twitter Color Emoji SVGinOT Font&amp;quot; de ???&lt;/h2&gt;
&lt;p&gt;Je cherche s&#39;il existe d&#39;autre polices d&#39;emojis et je tombe sur celle de Twitter, même si cela ressemble plus à du bricolage qu&#39;à un truc officiel : &lt;a href=&quot;https://github.com/eosrei/twemoji-color-font&quot;&gt;https://github.com/eosrei/twemoji-color-font&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Je télécharge, installe puis :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;e {
    font-family: &amp;quot;Twitter Color Emoji&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et oups...&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-font-twitter.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Tous les émojis sont gris clair...&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;5ème essai : &amp;quot;Emoji for everyone&amp;quot; de Twitter !!!&lt;/h2&gt;
&lt;p&gt;Par contre, ça m&#39;a conduit sur la page de &amp;quot;Twemoji&amp;quot; : &lt;a href=&quot;https://twemoji.twitter.com/&quot;&gt;https://twemoji.twitter.com/&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;L&#39;emoji open source de Twitter répond à tous les besoins de votre projet en
matière d&#39;emoji. Il prend en charge la dernière spécification Unicode des
emojis et propose 3 245 emojis, le tout gratuitement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mais c&#39;est génial !&lt;/p&gt;
&lt;p&gt;Il semblerait bien que cela soit pile ce que je cherche ! Quelque chose de pas compliqué du tout qui remplace tous les émojis d&#39;une page par l&#39;image de l&#39;émoji Twitter correspondant. Ca tombe bien, il me plaisent beaucoup les émojis de Twitter moi :)&lt;/p&gt;
&lt;p&gt;Je vire ma fonction &amp;quot;MakePrettyEmojis&amp;quot; et mon bout de CSS pour revenir à la situation de départ.&lt;/p&gt;
&lt;p&gt;J&#39;ajoute un peu de JavaScript dans mon fichier &amp;quot;_Layout.cshtml&amp;quot; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;https://twemoji.maxcdn.com/v/latest/twemoji.min.js&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script&amp;gt;
    window.onload = function () {
        // https://gist.github.com/Armster15/db063ab0dc5be699ae07a067a7333752
        // Parses the document body and
        // inserts &amp;lt;img&amp;gt; tags in place of Unicode Emojis
        twemoji.parse(document.body,
            { folder: &#39;svg&#39;, ext: &#39;.svg&#39; } // This is to specify to Twemoji to use SVGs and not PNGs
        );
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et je dimensionne les émojis dans mon CSS :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.emoji {
    height: 1.2em;
    width: 1.2em;
    margin: 0 1px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&quot;/public/2022/emoji-twitter.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;Tada ! C&#39;est parfaitement parfait.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Au départ, je comptais remplacer les émojis de Windows 10 pour en utiliser de plus modernes (et les derniers de Microsoft m&#39;allaient très bien). Mais devant les difficultés et pour éviter d&#39;avoir à &amp;quot;hacker&amp;quot; mon système, j&#39;ai préféré me contenter de modifier mon application pour qu&#39;elle affiche les jolis émojis de Twitter à la place.&lt;/p&gt;
&lt;div class=&quot;encart&quot;&gt;
&lt;p&gt;English version: &lt;a href=&quot;/2022/09/20/replace-windows-10-emoji/&quot; hreflang=&quot;en-US&quot;&gt;Replace Windows 10&#39;s emoji&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

        </content>
        <category term="javascript" />
        <category term="twitter" />
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pagesd.info/public/2022/emoji-beebee.png" />
        <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://blog.pagesd.info/public/2022/emoji-beebee.png" />
    </entry>
    <entry>
        <title type="html">Dark mode for French Wordle</title>
        <link href="https://blog.pagesd.info/2022/02/02/dark-mode-french-wordle/" rel="alternate" hreflang="en-US" />
        <updated>2022-02-02T19:47:11.000Z</updated>
        <published>2022-02-02T19:47:11.000Z</published>
        <id>https://blog.pagesd.info/2022/02/02/dark-mode-french-wordle/</id>
        <summary>I&#39;ve added a dark mode to LeMOT, a way for me to see what modifications are required to do this without too many fuss.</summary>
        <content type="html" xml:lang="en-US" xml:base="https://blog.pagesd.info">
&lt;p&gt;Last Sunday, I added a dark theme to LeMOT, my &lt;a href=&quot;https://www.solitaire-play.com/lemot/&quot;&gt;French Wordle&lt;/a&gt;. Some players seemed to want it and it was a good opportunity for me to see how to do it without too many fuss.&lt;/p&gt;
&lt;h2&gt;Colors for light mode&lt;/h2&gt;
&lt;p&gt;To start with, I looked for the colors used in my CSS file and I found about ten of them. But in practice, this corresponds to the following 12 use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#fff&lt;/code&gt; for the general white background&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#333&lt;/code&gt; for the general near-black text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#888&lt;/code&gt; for slightly lighter text in italics&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#ddd&lt;/code&gt; for text watermark&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#ccc&lt;/code&gt; light gray for the background of unused keyboard keys&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#fff&lt;/code&gt; white to display the letters once played in the boxes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#ffb000&lt;/code&gt; the famous orange for the background of well placed letters :)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#648fff&lt;/code&gt; the blue for the background of misplaced letters&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#ddd&lt;/code&gt; a slightly lighter gray for the background of the letters missing from the word to guess&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#bbb&lt;/code&gt; not very light gray for icons&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#dc267f&lt;/code&gt; a purple background for the &amp;quot;unknown word&amp;quot; message&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#fff&lt;/code&gt; white text for the &amp;quot;unknown word&amp;quot; message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;h2&gt;Colors for dark mode&lt;/h2&gt;
&lt;p&gt;I then searched what colors to use when in dark mode. It wasn&#39;t too difficult, since you just have to look at the original &lt;a href=&quot;https://powerlanguage.co.uk/wordle/&quot;&gt;Wordle&lt;/a&gt; for inspiration... After a few tries, I came up with these colors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#222&lt;/code&gt; for a very black general background&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#333&lt;/code&gt; for a very white general text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#888&lt;/code&gt; for a less white italic text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#444&lt;/code&gt; for the watermark text in grey / black&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#888&lt;/code&gt; a &amp;quot;medium&amp;quot; gray for the background of the unused keyboard keys&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#fff&lt;/code&gt; white to display the letters once played in the boxes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#ffb000&lt;/code&gt; the famous orange for the background of well placed letters :)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#648fff&lt;/code&gt; the blue for the background of misplaced letters&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#444&lt;/code&gt; a gray / black for the background of the letters absent from the word to guess&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#888&lt;/code&gt; a &amp;quot;medium&amp;quot; gray for the icons&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#dc267f&lt;/code&gt; a purple background for the message &amp;quot;unknown word&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#fff&lt;/code&gt; white text for the &amp;quot;unknown word&amp;quot; message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I display links in bright blue (&lt;code&gt;#00f&lt;/code&gt;), I had to find another one that would look good in both dark and light modes. I took the blue &lt;code&gt;#2962ff&lt;/code&gt; from one of my other sites, but I probably have to improve it because I&#39;m not very happy with it...&lt;/p&gt;
&lt;p&gt;Dark colors, done!&lt;/p&gt;
&lt;h2&gt;Setting light or dark theme&lt;/h2&gt;
&lt;p&gt;Now, either I was finally starting to code a settings screen, or I was cheating by relying on the &lt;code&gt;prefers-color-scheme&lt;/code&gt; media directive. This directive detects the user&#39;s choice of theme preference (dark or light).&lt;/p&gt;
&lt;p&gt;Of course I did the easiest one. But also the most normal one in my opinion: why force people to repeat in my game what they have already set on their phone or browser!&lt;/p&gt;
&lt;p&gt;And so now, my CSS file starts with a bunch of CSS variables.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Thèmes
   ========================================================================== */

:root {
  --fond-general: #fff;      /* Fond blanc général */
  --texte-normal: #333;      /* Texte quasi noir */
  --texte-clair: #888;       /* Texte plus clair pour notes */
  --texte-jouee: #fff;       /* Texte blanc une fois la lettre jouée */
  --filigrane: #ddd;         /* Couleur du texte en filigrane */
  --message-fond: #dc267f;   /* Fond mauve pour les messages */
  --message-texte: #fff;     /* Texte blanc pour les messages */
  --touche-fond: #ccc;       /* Fond gris clair pour touche inutilisée */
  --touche-texte: #333;      /* Texte quasi noir pour touche en général */
  --fond-correct: #ffb000;   /* Orange pour les lettres bien placées */
  --fond-present: #648fff;   /* Bleu pour les lettres mal placées */
  --fond-absent: #ddd;       /* Gris clair pour les lettres absentes */
  --couleur-icone: #bbb;     /* Gris pas très clair pour icones */
  --texte-lien: #2962ff;     /* Bleu pour les liens */
}

@media (prefers-color-scheme: dark) { :root {
  --fond-general: #222;      /* Fond très noir général */
  --texte-normal: #eee;      /* Texte très blanc */
  --texte-jouee: #fff;       /* Texte blanc une fois la lettre jouée */
  --texte-clair: #888;       /* Texte moins blanc pour notes */
  --filigrane: #444;         /* Couleur du texte en filigrane */
  --message-fond: #dc267f;   /* Fond mauve pour les messages */
  --message-texte: #fff;     /* Texte blanc pour les messages */
  --touche-fond: #888;       /* Fond gris moyen pour touche inutilisée */
  --touche-texte: #fff;      /* Texte blanc pour touche en général */
  --fond-correct: #ffb000;   /* Orange pour les lettres bien placées */
  --fond-present: #648fff;   /* Bleu pour les lettres mal placées */
  --fond-absent: #444;       /* Gris-noir pour les lettres absentes */
  --couleur-icone: #888;     /* Gris moyen pour icones */
  --texte-lien: #2962ff;     /* Bleu pour les liens */
}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A good thing done!&lt;/p&gt;
&lt;h2&gt;A last one for the road...&lt;/h2&gt;
&lt;p&gt;I use an antiquity to compress CSS (&lt;a href=&quot;https://github.com/Microsoft/ajaxmin&quot;&gt;Microsoft Ajax Minifier&lt;/a&gt;) and it didn&#39;t hold up against CSS variables :( So for now, I went to the first comer, namely &lt;a href=&quot;https://github.com/css/csso&quot;&gt;CSSO&lt;/a&gt;, via its &lt;a href=&quot;https://github.com/css/csso-cli&quot;&gt;csso-cli&lt;/a&gt; version to do the job.&lt;/p&gt;
&lt;p&gt;I wonder if it would be possible to compress the CSS variable names, so that &lt;code&gt;--fond-general&lt;/code&gt; is shortened to &lt;code&gt;--a&lt;/code&gt;, &lt;code&gt;--texte-normal&lt;/code&gt; becomes &lt;code&gt;--b&lt;/code&gt;, etc...&lt;/p&gt;
&lt;p&gt;This is something I&#39;ll definitely have to review some day to make an informed decision about what I&#39;ll use from now on...&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Anyway, another weekend well spent, since it is finally possible to enjoy &lt;strong&gt;LeMOT&lt;/strong&gt; to its fullest, even if you prefer to use a dark mode!&lt;/p&gt;
&lt;p&gt;And to play, it&#39;s still there: &lt;a href=&quot;https://www.solitaire-play.com/lemot/&quot;&gt;https://www.solitaire-play.com/lemot/&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2022/wordle-fr-dark.png&quot; alt=&quot;Dark mode for LeMOT&quot; title=&quot;Not so bad, i guess!&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;encart&quot;&gt;
&lt;p&gt;Version en français : &lt;a href=&quot;/2022/02/01/mode-sombre-wordle-francais/&quot; hreflang=&quot;fr-FR&quot;&gt;Mode sombre pour Wordle en français&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

        </content>
        <category term="javascript" />
        <category term="jeux" />
        <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.pagesd.info/public/2022/lemot-wordle-fr.png" />
        <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://blog.pagesd.info/public/2022/lemot-wordle-fr.png" />
    </entry>
</feed>